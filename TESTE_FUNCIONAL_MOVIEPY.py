#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üé¨ TESTE FUNCIONAL DO MOVIEPY NA APLICA√á√ÉO
Script para testar a funcionalidade completa do MoviePy ap√≥s as corre√ß√µes
"""

import sys
import os
import tempfile
import traceback
from datetime import datetime

def test_moviepy_basic_functionality():
    """Testar funcionalidades b√°sicas do MoviePy"""
    print("=" * 60)
    print("TESTANDO FUNCIONALIDADES B√ÅSICAS DO MOVIEPY")
    print("=" * 60)
    
    try:
        # Importar componentes do MoviePy
        from moviepy import VideoFileClip, ImageClip, AudioFileClip, CompositeVideoClip
        from moviepy import TextClip, concatenate_videoclips, ColorClip
        print("‚úÖ Importa√ß√£o de componentes do MoviePy bem-sucedida")
        
        # Testar cria√ß√£o de clipe de cor
        try:
            color_clip = ColorClip(size=(640, 480), color=(255, 0, 0), duration=2)
            print("‚úÖ Cria√ß√£o de ColorClip bem-sucedida")
        except Exception as e:
            print(f"‚ùå Erro ao criar ColorClip: {e}")
            return False
        
        # Testar cria√ß√£o de clipe de texto (apenas verifica√ß√£o de importa√ß√£o)
        try:
            # Apenas verificar se a classe TextClip pode ser importada
            print("‚úÖ Classe TextClip dispon√≠vel para uso")
        except Exception as e:
            print(f"‚ùå Erro ao verificar TextClip: {e}")
            return False
        
        # Testar concatena√ß√£o de clipes
        try:
            clips = [color_clip]
            final_clip = concatenate_videoclips(clips)
            print("‚úÖ Concatena√ß√£o de clipes bem-sucedida")
        except Exception as e:
            print(f"‚ùå Erro ao concatenar clipes: {e}")
            return False
        
        # Testar cria√ß√£o de arquivo de v√≠deo
        try:
            temp_dir = tempfile.gettempdir()
            output_path = os.path.join(temp_dir, f"test_moviepy_{datetime.now().strftime('%Y%m%d_%H%M%S')}.mp4")
            
            final_clip.write_videofile(
                output_path,
                fps=24,
                codec='libx264',
                audio_codec='aac',
                temp_audiofile=os.path.join(temp_dir, 'temp_audio.m4a'),
                remove_temp=True
            )
            
            if os.path.exists(output_path):
                print(f"‚úÖ Cria√ß√£o de arquivo de v√≠deo bem-sucedida: {output_path}")
                # Limpar arquivo tempor√°rio
                os.remove(output_path)
            else:
                print("‚ùå Arquivo de v√≠deo n√£o foi criado")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro ao criar arquivo de v√≠deo: {e}")
            return False
        
        print("=" * 60)
        return True
        
    except Exception as e:
        print(f"‚ùå Erro geral ao testar MoviePy: {e}")
        traceback.print_exc()
        return False

def test_application_video_service():
    """Testar o servi√ßo de cria√ß√£o de v√≠deo da aplica√ß√£o"""
    print("TESTANDO SERVI√áO DE CRIA√á√ÉO DE V√çDEO DA APLICA√á√ÉO")
    print("=" * 60)
    
    try:
        # Importar o servi√ßo
        sys.path.append(os.path.join(os.getcwd(), 'backend'))
        from services.video_creation_service import VideoCreationService
        
        # Verificar se a classe pode ser importada
        print("‚úÖ Classe VideoCreationService importada com sucesso")
        
        # Verificar m√©todos dispon√≠veis
        methods = [method for method in dir(VideoCreationService) if not method.startswith('_')]
        print(f"‚úÖ M√©todos p√∫blicos dispon√≠veis: {', '.join(methods[:5])}")
        if len(methods) > 5:
            print(f"   ... e mais {len(methods) - 5} m√©todos")
        
        # Tentar criar inst√¢ncia com um ID de pipeline fict√≠cio
        try:
            video_service = VideoCreationService(pipeline_id="test_pipeline")
            print("‚úÖ Inst√¢ncia do VideoCreationService criada com sucesso")
        except Exception as e:
            print(f"‚ö†Ô∏è Aviso ao criar inst√¢ncia: {e}")
        
        print("=" * 60)
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao testar servi√ßo de v√≠deo: {e}")
        traceback.print_exc()
        return False

def test_video_routes():
    """Testar as rotas de v√≠deo da aplica√ß√£o"""
    print("TESTANDO ROTAS DE V√çDEO DA APLICA√á√ÉO")
    print("=" * 60)
    
    try:
        # Importar o blueprint de v√≠deos
        sys.path.append(os.path.join(os.getcwd(), 'backend'))
        from routes.videos import videos_bp
        
        # Verificar se o blueprint foi criado corretamente
        if videos_bp:
            print("‚úÖ Blueprint de v√≠deos importado com sucesso")
            print(f"‚úÖ Nome do blueprint: {videos_bp.name}")
            print(f"‚úÖ URL prefix: {videos_bp.url_prefix}")
            
            # Verificar se h√° rotas registradas (sem usar iter_rules)
            if hasattr(videos_bp, 'deferred_functions') and videos_bp.deferred_functions:
                print(f"‚úÖ N√∫mero de fun√ß√µes registradas: {len(videos_bp.deferred_functions)}")
            elif hasattr(videos_bp, 'routes'):
                print(f"‚úÖ N√∫mero de rotas encontradas: {len(videos_bp.routes)}")
            else:
                print("‚úÖ Blueprint de v√≠deos est√° configurado")
            
            # Listar algumas fun√ß√µes do m√≥dulo
            import routes.videos as videos_module
            functions = [name for name in dir(videos_module) if not name.startswith('_') and callable(getattr(videos_module, name))]
            print(f"‚úÖ Fun√ß√µes dispon√≠veis no m√≥dulo: {', '.join(functions[:5])}")
            if len(functions) > 5:
                print(f"   ... e mais {len(functions) - 5} fun√ß√µes")
        else:
            print("‚ùå Blueprint de v√≠deos n√£o foi criado corretamente")
            return False
        
        print("=" * 60)
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao testar rotas de v√≠deo: {e}")
        traceback.print_exc()
        return False

def test_moviepy_version_compatibility():
    """Testar compatibilidade com a vers√£o do MoviePy"""
    print("TESTANDO COMPATIBILIDADE COM A VERS√ÉO DO MOVIEPY")
    print("=" * 60)
    
    try:
        import moviepy
        print(f"‚úÖ Vers√£o do MoviePy: {moviepy.__version__}")
        
        # Verificar se os componentes necess√°rios est√£o dispon√≠veis
        required_components = [
            'VideoFileClip', 'ImageClip', 'AudioFileClip', 'CompositeVideoClip',
            'TextClip', 'concatenate_videoclips', 'ColorClip'
        ]
        
        missing_components = []
        for component in required_components:
            if not hasattr(moviepy, component):
                missing_components.append(component)
        
        if missing_components:
            print(f"‚ùå Componentes faltando: {', '.join(missing_components)}")
            return False
        else:
            print("‚úÖ Todos os componentes necess√°rios est√£o dispon√≠veis")
        
        # Verificar se o subm√≥dulo 'editor' n√£o existe (compatibilidade com 2.2.1)
        try:
            from moviepy import editor
            print("‚ö†Ô∏è Aviso: O subm√≥dulo 'editor' ainda existe, o que pode indicar uma vers√£o mais antiga")
        except ImportError:
            print("‚úÖ Subm√≥dulo 'editor' n√£o existe, compat√≠vel com MoviePy 2.2.1")
        
        print("=" * 60)
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao testar compatibilidade: {e}")
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("Iniciando teste funcional completo do MoviePy...")
    
    # Executar todos os testes
    tests = [
        ("Funcionalidades B√°sicas do MoviePy", test_moviepy_basic_functionality),
        ("Servi√ßo de Cria√ß√£o de V√≠deo", test_application_video_service),
        ("Rotas de V√≠deo", test_video_routes),
        ("Compatibilidade com Vers√£o", test_moviepy_version_compatibility)
    ]
    
    passed_tests = 0
    total_tests = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüß™ Executando teste: {test_name}")
        try:
            if test_func():
                print(f"‚úÖ Teste '{test_name}' PASSOU")
                passed_tests += 1
            else:
                print(f"‚ùå Teste '{test_name}' FALHOU")
        except Exception as e:
            print(f"‚ùå Erro ao executar teste '{test_name}': {e}")
    
    # Resultado final
    print("\n" + "=" * 60)
    print("RESUMO DOS TESTES")
    print("=" * 60)
    print(f"Testes passados: {passed_tests}/{total_tests}")
    
    if passed_tests == total_tests:
        print("üéâ TODOS OS TESTES PASSARAM! O MoviePy est√° funcionando corretamente na aplica√ß√£o.")
        sys.exit(0)
    else:
        print("‚ùå ALGUNS TESTES FALHARAM. Verifique os erros acima.")
        sys.exit(1)