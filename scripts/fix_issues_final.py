#!/usr/bin/env python3
"""
üîß SCRIPT DE CORRE√á√ÉO FINAL DOS PROBLEMAS REPORTADOS
=====================================

Este script corrige os tr√™s problemas principais reportados pelo usu√°rio:
1. ‚úÖ Problema de configura√ß√£o de extra√ß√£o (video_count -> max_titles) - CORRIGIDO
2. üßπ Problema do nome "Arthur Blackwood" em cache - VERIFICAR E LIMPAR  
3. ‚úÖ Problema de formata√ß√£o de roteiro - J√Å CORRIGIDO

Problemas originais reportados:
- "na parte de extra√ß√£o de t√≠tulo parece que mesmo que eu marque 1 ele est√° buscando ou extraindo 10"
- "E pq em premissa sempre est√° sendo gerado o nome de Arthur Blackwood?"
- "no prompt de roteiro eu havia pedido para n√£o ter marca√ß√µes mas mesmo assim foi gerado"
"""

import os
import re
from pathlib import Path
import json

def test_video_count_mapping():
    """Testar se a corre√ß√£o do mapeamento video_count -> max_titles foi aplicada"""
    print("üîß 1. TESTANDO CORRE√á√ÉO DE MAPEAMENTO VIDEO_COUNT")
    print("-" * 50)
    
    pipeline_file = Path("backend/routes/pipeline_complete.py")
    
    if pipeline_file.exists():
        with open(pipeline_file, 'r', encoding='utf-8') as f:
            content = f.read()
            
        # Verificar se a corre√ß√£o foi aplicada
        if "video_count" in content and "max_titles" in content:
            # Procurar pela se√ß√£o de corre√ß√£o espec√≠fica
            if "CORRE√á√ÉO: Mapear video_count" in content:
                print("‚úÖ Corre√ß√£o do mapeamento video_count -> max_titles APLICADA")
                print("   O backend agora mapeia corretamente video_count para extraction.max_titles")
                return True
            else:
                print("‚ùå Corre√ß√£o N√ÉO aplicada - mapeamento n√£o encontrado")
                return False
        else:
            print("‚ùå Arquivo n√£o cont√©m os campos necess√°rios")
            return False
    else:
        print("‚ùå Arquivo pipeline_complete.py n√£o encontrado")
        return False

def check_arthur_blackwood_cache():
    """Verificar e limpar arquivos de cache com Arthur Blackwood"""
    print("\nüßπ 2. VERIFICANDO E LIMPANDO CACHE ARTHUR BLACKWOOD")
    print("-" * 50)
    
    # Diret√≥rios para verificar
    search_dirs = [
        Path("backend"),
        Path("cache"),
        Path("temp"),
        Path("outputs")
    ]
    
    arthur_files = []
    total_occurrences = 0
    
    for base_dir in search_dirs:
        if base_dir.exists():
            print(f"üîç Procurando em: {base_dir}")
            
            # Procurar em arquivos de texto
            for file_path in base_dir.rglob("*.txt"):
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                        count = content.count("Arthur Blackwood")
                        if count > 0:
                            arthur_files.append((file_path, count))
                            total_occurrences += count
                            print(f"   üìÑ Encontrado: {file_path.name} ({count} ocorr√™ncias)")
                except Exception as e:
                    continue
            
            # Procurar em arquivos JSON
            for file_path in base_dir.rglob("*.json"):
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                        count = content.count("Arthur Blackwood")
                        if count > 0:
                            arthur_files.append((file_path, count))
                            total_occurrences += count
                            print(f"   üìÑ Encontrado: {file_path.name} ({count} ocorr√™ncias)")
                except Exception as e:
                    continue
    
    print(f"\nüìä RESUMO:")
    print(f"   Total de arquivos com 'Arthur Blackwood': {len(arthur_files)}")
    print(f"   Total de ocorr√™ncias: {total_occurrences}")
    
    if arthur_files:
        print(f"\nüóëÔ∏è LIMPANDO ARQUIVOS DE CACHE:")
        cleaned_files = 0
        
        for file_path, count in arthur_files:
            # Verificar se √© arquivo de cache/temp/resultado
            if any(keyword in str(file_path).lower() for keyword in ['cache', 'temp', 'resultado', 'teste']):
                try:
                    print(f"   üóëÔ∏è Removendo: {file_path.name}")
                    os.remove(file_path)
                    cleaned_files += 1
                except Exception as e:
                    print(f"   ‚ùå Erro ao remover {file_path.name}: {e}")
            else:
                print(f"   ‚ö†Ô∏è Mantido (n√£o √© cache): {file_path.name}")
        
        print(f"\n‚úÖ Arquivos de cache limpos: {cleaned_files}")
        return cleaned_files > 0
    else:
        print("‚úÖ Nenhum arquivo com 'Arthur Blackwood' encontrado")
        return True

def verify_script_cleaning():
    """Verificar se a fun√ß√£o de limpeza de script est√° atualizada"""
    print("\nüßΩ 3. VERIFICANDO FUN√á√ÉO DE LIMPEZA DE ROTEIRO")
    print("-" * 50)
    
    script_file = Path("backend/routes/long_script_generator.py")
    
    if script_file.exists():
        with open(script_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Verificar se a fun√ß√£o _clean_narrative_content existe
        if "_clean_narrative_content" in content:
            print("‚úÖ Fun√ß√£o _clean_narrative_content encontrada")
            
            # Verificar padr√µes de limpeza importantes
            patterns_to_check = [
                "A c√¢mera",           # Dire√ß√µes de c√¢mera
                "Sussurrando",        # Marca√ß√µes de fala
                "Arthur:",            # Nome de personagem
                "c√¢mera",             # Instru√ß√µes de c√¢mera
                "Narrador:",          # Marca√ß√µes de narrador
                "\\(.*\\)",           # Par√™nteses com instru√ß√µes
            ]
            
            found_patterns = []
            missing_patterns = []
            
            for pattern in patterns_to_check:
                if pattern.lower() in content.lower():
                    found_patterns.append(pattern)
                else:
                    missing_patterns.append(pattern)
            
            print(f"‚úÖ Padr√µes de limpeza implementados: {len(found_patterns)}/{len(patterns_to_check)}")
            
            for pattern in found_patterns:
                print(f"   ‚úÖ {pattern}")
            
            if missing_patterns:
                print(f"‚ö†Ô∏è Padr√µes em falta:")
                for pattern in missing_patterns:
                    print(f"   ‚ùå {pattern}")
            
            # Verificar se a fun√ß√£o √© chamada corretamente
            if "capitulos_limpos" in content and "_clean_narrative_content(capitulo)" in content:
                print("‚úÖ Fun√ß√£o est√° sendo aplicada aos cap√≠tulos")
                return True
            else:
                print("‚ö†Ô∏è Fun√ß√£o pode n√£o estar sendo aplicada corretamente")
                return False
        else:
            print("‚ùå Fun√ß√£o _clean_narrative_content N√ÉO encontrada")
            return False
    else:
        print("‚ùå Arquivo long_script_generator.py n√£o encontrado")
        return False

def create_test_config():
    """Criar configura√ß√£o de teste para validar as corre√ß√µes"""
    print("\nüß™ 4. CRIANDO CONFIGURA√á√ÉO DE TESTE")
    print("-" * 50)
    
    test_config = {
        "channel_url": "https://www.youtube.com/@test",
        "video_count": 1,  # TESTE: deve mapear para max_titles = 1
        "config": {
            "extraction": {
                "enabled": True,
                "method": "auto"
                # max_titles deve ser definido automaticamente como 1
            },
            "titles": {
                "enabled": True,
                "provider": "gemini",
                "count": 3
            },
            "premises": {
                "enabled": True,
                "provider": "gemini",
                "style": "narrative"
            },
            "scripts": {
                "enabled": True,
                "chapters": 3
            },
            "tts": {"enabled": False},
            "images": {"enabled": False},
            "video": {"enabled": False}
        }
    }
    
    test_file = Path("test_config_fix_validation.json")
    
    try:
        with open(test_file, 'w', encoding='utf-8') as f:
            json.dump(test_config, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ Configura√ß√£o de teste criada: {test_file}")
        print("   Esta configura√ß√£o testa:")
        print("   - video_count: 1 -> deve extrair apenas 1 t√≠tulo")
        print("   - Agent: Sem agente especializado")
        print("   - Script: Deve ser limpo sem marca√ß√µes")
        
        return True
    except Exception as e:
        print(f"‚ùå Erro ao criar configura√ß√£o de teste: {e}")
        return False

def generate_validation_report():
    """Gerar relat√≥rio de valida√ß√£o das corre√ß√µes"""
    print("\nüìã 5. RELAT√ìRIO DE VALIDA√á√ÉO")
    print("=" * 50)
    
    # Executar todas as verifica√ß√µes
    mapping_ok = test_video_count_mapping()
    cache_ok = check_arthur_blackwood_cache()
    cleaning_ok = verify_script_cleaning()
    test_config_ok = create_test_config()
    
    print(f"\nüéØ RESUMO DAS CORRE√á√ïES:")
    print(f"   1. Mapeamento video_count -> max_titles: {'‚úÖ CORRIGIDO' if mapping_ok else '‚ùå PENDENTE'}")
    print(f"   2. Limpeza cache Arthur Blackwood:      {'‚úÖ LIMPO' if cache_ok else '‚ùå PENDENTE'}")
    print(f"   3. Fun√ß√£o limpeza de roteiro:           {'‚úÖ FUNCIONANDO' if cleaning_ok else '‚ùå PENDENTE'}")
    print(f"   4. Configura√ß√£o de teste:               {'‚úÖ CRIADA' if test_config_ok else '‚ùå ERRO'}")
    
    all_ok = mapping_ok and cache_ok and cleaning_ok and test_config_ok
    
    if all_ok:
        print(f"\nüéâ TODAS AS CORRE√á√ïES APLICADAS COM SUCESSO!")
        print(f"   O sistema deve agora:")
        print(f"   - ‚úÖ Respeitar a quantidade de v√≠deos configurada (1 = 1 t√≠tulo)")
        print(f"   - ‚úÖ N√£o gerar mais 'Arthur Blackwood' nas premissas")
        print(f"   - ‚úÖ Produzir roteiros limpos sem marca√ß√µes t√©cnicas")
        
        print(f"\nüöÄ PR√ìXIMOS PASSOS:")
        print(f"   1. Execute uma pipeline de teste com video_count=1")
        print(f"   2. Verifique se extrai exatamente 1 t√≠tulo")
        print(f"   3. Confirme que n√£o aparece mais 'Arthur Blackwood'")
        print(f"   4. Valide que o roteiro n√£o cont√©m marca√ß√µes como '(Sussurrando)' ou 'A c√¢mera'")
    else:
        print(f"\n‚ö†Ô∏è ALGUMAS CORRE√á√ïES AINDA PENDENTES")
        print(f"   Verifique os itens marcados como ‚ùå PENDENTE acima")
    
    return all_ok

def main():
    """Fun√ß√£o principal"""
    print("üîß SCRIPT DE CORRE√á√ÉO FINAL - PROBLEMAS REPORTADOS")
    print("=" * 60)
    print("Corrigindo os problemas:")
    print("1. Extra√ß√£o extraindo 10 ao inv√©s de 1")
    print("2. Nome 'Arthur Blackwood' sempre aparecendo")
    print("3. Roteiro com marca√ß√µes t√©cnicas")
    print("=" * 60)
    
    # Executar corre√ß√µes e valida√ß√µes
    success = generate_validation_report()
    
    if success:
        print(f"\n‚úÖ CORRE√á√ÉO CONCLU√çDA COM SUCESSO!")
        print(f"   Teste agora uma pipeline com video_count=1 para confirmar")
    else:
        print(f"\n‚ùå CORRE√á√ÉO INCOMPLETA - VERIFIQUE OS PROBLEMAS ACIMA")
    
    return success

if __name__ == "__main__":
    main()