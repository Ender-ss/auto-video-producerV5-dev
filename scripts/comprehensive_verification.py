#!/usr/bin/env python3
"""
üîç Verifica√ß√£o Completa e Detalhada do Sistema
Testa m√∫ltiplas pipelines para confirmar se todos os problemas foram corrigidos
"""

import json
import requests
import time
from datetime import datetime

def test_comprehensive_pipeline_verification():
    """Verifica√ß√£o completa de m√∫ltiplas pipelines"""
    
    print("üîç VERIFICA√á√ÉO COMPLETA DO SISTEMA")
    print("=" * 60)
    print(f"‚è∞ Iniciado em: {datetime.now().strftime('%H:%M:%S')}")
    
    # Teste 1: Pipeline com agente especializado
    print("\n" + "="*50)
    print("üìã TESTE 1: PIPELINE COM AGENTE ESPECIALIZADO")
    print("="*50)
    
    test1_success = test_agent_specialized_pipeline()
    
    # Teste 2: Pipeline sem agente (padr√£o)
    print("\n" + "="*50)
    print("üìã TESTE 2: PIPELINE PADR√ÉO (SEM AGENTE)")
    print("="*50)
    
    test2_success = test_standard_pipeline()
    
    # Teste 3: Verificar pipeline anterior que estava com problemas
    print("\n" + "="*50)
    print("üìã TESTE 3: VERIFICAR PIPELINE ANTERIOR")
    print("="*50)
    
    test3_success = verify_previous_pipeline()
    
    # Relat√≥rio final
    print("\n" + "="*60)
    print("üìä RELAT√ìRIO FINAL DA VERIFICA√á√ÉO")
    print("="*60)
    
    results = [
        ("Pipeline com Agente Especializado", test1_success),
        ("Pipeline Padr√£o", test2_success),
        ("Pipeline Anterior", test3_success)
    ]
    
    all_passed = True
    for test_name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{test_name}: {status}")
        if not result:
            all_passed = False
    
    print(f"\nüéØ RESULTADO GERAL:")
    if all_passed:
        print("‚úÖ TODOS OS PROBLEMAS FORAM CORRIGIDOS COM SUCESSO!")
        print("‚úÖ Sistema funcionando perfeitamente em todos os cen√°rios")
        return True
    else:
        print("‚ùå AINDA H√Å PROBLEMAS NO SISTEMA")
        print("‚ùå Corre√ß√µes adicionais s√£o necess√°rias")
        return False

def test_agent_specialized_pipeline():
    """Testar pipeline com agente especializado"""
    
    print("ü§ñ Testando pipeline com agente 'Hist√≥rias de Milion√°rios'")
    
    config = {
        "channel_url": "https://www.youtube.com/@MrBeast",
        "agent": {
            "type": "specialized",
            "specialized_type": "millionaire_stories"
        },
        "config": {
            "extraction": {
                "enabled": True,
                "method": "yt-dlp", 
                "max_titles": 3
            },
            "titles": {
                "enabled": True,
                "provider": "gemini",
                "count": 3,
                "style": "viral"
            },
            "premises": {
                "enabled": True,
                "provider": "gemini",
                "word_count": 150
            },
            "scripts": {
                "enabled": True,
                "chapters": 3,
                "provider": "gemini"
            },
            "tts": {"enabled": False},
            "images": {"enabled": False},
            "video": {"enabled": False}
        }
    }
    
    return execute_pipeline_test("AGENTE ESPECIALIZADO", config)

def test_standard_pipeline():
    """Testar pipeline padr√£o sem agente"""
    
    print("‚öôÔ∏è Testando pipeline padr√£o sem agente")
    
    config = {
        "channel_url": "https://www.youtube.com/@MrBeast",
        "config": {
            "extraction": {
                "enabled": True,
                "method": "yt-dlp",
                "max_titles": 2
            },
            "titles": {
                "enabled": True,
                "provider": "gemini",
                "count": 2,
                "style": "viral"
            },
            "premises": {
                "enabled": True,
                "provider": "gemini",
                "word_count": 100
            },
            "scripts": {
                "enabled": True,
                "chapters": 2,
                "provider": "gemini"
            },
            "tts": {"enabled": False},
            "images": {"enabled": False},
            "video": {"enabled": False}
        }
    }
    
    return execute_pipeline_test("PADR√ÉO", config)

def execute_pipeline_test(test_name, config):
    """Executar teste de pipeline e verificar resultados"""
    
    try:
        print(f"üì§ Criando pipeline {test_name}...")
        response = requests.post('http://localhost:5000/api/pipeline/complete', json=config)
        
        if response.status_code != 200:
            print(f"‚ùå Erro ao criar pipeline: {response.status_code}")
            return False
        
        result = response.json()
        pipeline_id = result.get('pipeline_id')
        
        if not pipeline_id:
            print("‚ùå Pipeline criada mas sem ID")
            return False
        
        print(f"‚úÖ Pipeline criada: {pipeline_id}")
        
        # Aguardar conclus√£o
        for i in range(15):  # 75 segundos m√°ximo
            time.sleep(5)
            status_response = requests.get(f'http://localhost:5000/api/pipeline/status/{pipeline_id}')
            
            if status_response.status_code == 200:
                status_result = status_response.json()
                pipeline_data = status_result.get('data', {})
                current_status = pipeline_data.get('status', 'unknown')
                
                print(f"‚è≥ Status {i+1}/15: {current_status}")
                
                if current_status == 'completed':
                    print(f"‚úÖ Pipeline {test_name} conclu√≠da!")
                    return analyze_pipeline_results(pipeline_id, test_name, config)
                elif current_status == 'failed':
                    print(f"‚ùå Pipeline {test_name} falhou!")
                    return False
            else:
                print(f"‚ùå Erro ao verificar status: {status_response.status_code}")
        
        print(f"‚è∞ Timeout na pipeline {test_name}")
        return False
        
    except Exception as e:
        print(f"‚ùå Exce√ß√£o no teste {test_name}: {str(e)}")
        return False

def analyze_pipeline_results(pipeline_id, test_name, original_config):
    """Analisar resultados detalhados da pipeline"""
    
    try:
        print(f"\nüìä AN√ÅLISE DETALHADA - {test_name}")
        print("-" * 40)
        
        response = requests.get(f'http://localhost:5000/api/pipeline/status/{pipeline_id}')
        if response.status_code != 200:
            print("‚ùå Erro ao buscar resultados")
            return False
        
        result = response.json()
        pipeline_data = result['data']
        
        # Verificar configura√ß√£o vs execu√ß√£o
        config = pipeline_data.get('config', {})
        steps = pipeline_data.get('steps', {})
        results = pipeline_data.get('results', {})
        
        success = True
        
        # 1. Verificar EXTRACTION
        print("üì• VERIFICANDO EXTRA√á√ÉO:")
        extraction_step = steps.get('extraction', {})
        extraction_status = extraction_step.get('status', 'N/A')
        extraction_result = extraction_step.get('result', {})
        
        extraction_config = original_config['config']['extraction']
        max_titles_config = extraction_config.get('max_titles', 0)
        
        print(f"   Status: {extraction_status}")
        
        if extraction_status != 'completed':
            print(f"   ‚ùå PROBLEMA: Status n√£o √© 'completed'")
            success = False
        elif not extraction_result:
            print(f"   ‚ùå PROBLEMA: Nenhum resultado de extra√ß√£o")
            success = False
        else:
            extracted_titles = extraction_result.get('titles', [])
            print(f"   Configurado: {max_titles_config} t√≠tulos")
            print(f"   Extra√≠do: {len(extracted_titles)} t√≠tulos")
            
            if len(extracted_titles) == 0:
                print(f"   ‚ùå PROBLEMA: Nenhum t√≠tulo foi extra√≠do")
                success = False
            elif len(extracted_titles) != max_titles_config:
                print(f"   ‚ö†Ô∏è AVISO: Quantidade diferente da configurada")
            else:
                print(f"   ‚úÖ EXTRA√á√ÉO OK: {len(extracted_titles)} t√≠tulos extra√≠dos")
            
            if extracted_titles:
                print(f"   Exemplos extra√≠dos:")
                for i, title in enumerate(extracted_titles[:2]):
                    title_text = title.get('title', title) if isinstance(title, dict) else title
                    print(f"      {i+1}. {title_text[:60]}...")
        
        # 2. Verificar TITLES
        print("\nüìù VERIFICANDO GERA√á√ÉO DE T√çTULOS:")
        titles_step = steps.get('titles', {})
        titles_status = titles_step.get('status', 'N/A')
        titles_result = titles_step.get('result', {})
        
        titles_config = original_config['config']['titles']
        count_config = titles_config.get('count', 0)
        
        print(f"   Status: {titles_status}")
        
        if titles_status != 'completed':
            print(f"   ‚ùå PROBLEMA: Status n√£o √© 'completed'")
            success = False
        elif not titles_result:
            print(f"   ‚ùå PROBLEMA: Nenhum resultado de gera√ß√£o de t√≠tulos")
            success = False
        else:
            generated_titles = titles_result.get('generated_titles', [])
            print(f"   Configurado: {count_config} t√≠tulos")
            print(f"   Gerado: {len(generated_titles)} t√≠tulos")
            
            if len(generated_titles) == 0:
                print(f"   ‚ùå PROBLEMA: Nenhum t√≠tulo foi gerado")
                success = False
            elif len(generated_titles) != count_config:
                print(f"   ‚ùå PROBLEMA: Quantidade n√£o corresponde √† configura√ß√£o")
                success = False
            else:
                print(f"   ‚úÖ T√çTULOS OK: {len(generated_titles)} t√≠tulos gerados")
            
            if generated_titles:
                print(f"   T√≠tulos gerados:")
                for i, title in enumerate(generated_titles[:2]):
                    print(f"      {i+1}. {title}")
        
        # 3. Verificar PREMISES
        print("\nüí° VERIFICANDO GERA√á√ÉO DE PREMISSAS:")
        premises_step = steps.get('premises', {})
        premises_status = premises_step.get('status', 'N/A')
        premises_result = premises_step.get('result', {})
        
        print(f"   Status: {premises_status}")
        
        if premises_status != 'completed':
            print(f"   ‚ùå PROBLEMA: Status n√£o √© 'completed'")
            success = False
        elif not premises_result:
            print(f"   ‚ùå PROBLEMA: Nenhum resultado de gera√ß√£o de premissas")
            success = False
        else:
            # Verificar ambos os formatos poss√≠veis
            premises_list = premises_result.get('premises', [])
            premise_single = premises_result.get('premise', '')
            
            if premises_list:
                print(f"   ‚úÖ PREMISSAS OK: {len(premises_list)} premissa(s) gerada(s)")
                premise_text = premises_list[0].get('premise', '') if isinstance(premises_list[0], dict) else premises_list[0]
                print(f"   Exemplo: {str(premise_text)[:100]}...")
            elif premise_single:
                print(f"   ‚úÖ PREMISSA OK: Premissa gerada ({len(premise_single)} chars)")
                print(f"   Exemplo: {premise_single[:100]}...")
            else:
                print(f"   ‚ùå PROBLEMA: Nenhuma premissa foi gerada")
                success = False
        
        # 4. Verificar SCRIPTS
        print("\nüìú VERIFICANDO GERA√á√ÉO DE ROTEIROS:")
        scripts_step = steps.get('scripts', {})
        scripts_status = scripts_step.get('status', 'N/A')
        scripts_result = scripts_step.get('result', {})
        
        print(f"   Status: {scripts_status}")
        
        if scripts_status != 'completed':
            print(f"   ‚ùå PROBLEMA: Status n√£o √© 'completed'")
            success = False
        elif not scripts_result:
            print(f"   ‚ùå PROBLEMA: Nenhum resultado de gera√ß√£o de roteiros")
            success = False
        else:
            script_content = scripts_result.get('script', '')
            scripts_list = scripts_result.get('scripts', [])
            
            if script_content:
                print(f"   ‚úÖ ROTEIRO OK: {len(script_content)} caracteres gerados")
                print(f"   In√≠cio: {script_content[:150]}...")
            elif scripts_list:
                print(f"   ‚úÖ ROTEIROS OK: {len(scripts_list)} roteiro(s) gerado(s)")
            else:
                print(f"   ‚ùå PROBLEMA: Nenhum roteiro foi gerado")
                success = False
        
        # 5. Verificar AGENTE (se aplic√°vel)
        agent_config = config.get('agent', {})
        if agent_config:
            print(f"\nü§ñ VERIFICANDO AGENTE ESPECIALIZADO:")
            agent_enabled = agent_config.get('enabled', False)
            agent_type = agent_config.get('type', 'N/A')
            agent_name = agent_config.get('name', 'N/A')
            
            print(f"   Habilitado: {agent_enabled}")
            print(f"   Tipo: {agent_type}")
            print(f"   Nome: {agent_name}")
            
            if agent_enabled:
                print(f"   ‚úÖ AGENTE OK: Configurado e ativo")
            else:
                print(f"   ‚ö†Ô∏è AGENTE: N√£o est√° ativo")
        
        # Resultado final do teste
        print(f"\nüéØ RESULTADO DO TESTE {test_name}:")
        if success:
            print(f"‚úÖ TODOS OS COMPONENTES FUNCIONARAM CORRETAMENTE")
        else:
            print(f"‚ùå H√Å PROBLEMAS QUE PRECISAM SER CORRIGIDOS")
        
        return success
        
    except Exception as e:
        print(f"‚ùå Erro na an√°lise: {str(e)}")
        return False

def verify_previous_pipeline():
    """Verificar se pipelines anteriores que estavam com problemas agora funcionam"""
    
    print("üîç Verificando pipelines anteriores...")
    
    try:
        response = requests.get('http://localhost:5000/api/pipeline/active')
        
        if response.status_code != 200:
            print("‚ùå Erro ao buscar pipelines ativas")
            return False
        
        result = response.json()
        pipelines = result.get('pipelines', [])
        
        if not pipelines:
            print("‚ö†Ô∏è Nenhuma pipeline anterior encontrada")
            return True  # N√£o √© um erro
        
        # Verificar a pipeline mais recente
        latest_pipeline = pipelines[0]
        pipeline_id = latest_pipeline.get('pipeline_id')
        
        print(f"üîç Verificando pipeline anterior: {pipeline_id}")
        
        status_response = requests.get(f'http://localhost:5000/api/pipeline/status/{pipeline_id}')
        
        if status_response.status_code != 200:
            print("‚ùå Erro ao buscar status da pipeline anterior")
            return False
        
        status_result = status_response.json()
        pipeline_data = status_result['data']
        
        status = pipeline_data.get('status', 'unknown')
        steps = pipeline_data.get('steps', {})
        
        print(f"   Status geral: {status}")
        
        # Verificar se tem resultados
        has_results = False
        for step_name in ['extraction', 'titles', 'premises', 'scripts']:
            step_data = steps.get(step_name, {})
            step_result = step_data.get('result', {})
            if step_result:
                has_results = True
                break
        
        if has_results:
            print("‚úÖ Pipeline anterior agora tem resultados")
            return True
        else:
            print("‚ùå Pipeline anterior ainda sem resultados")
            return False
    
    except Exception as e:
        print(f"‚ùå Erro na verifica√ß√£o: {str(e)}")
        return False

if __name__ == "__main__":
    success = test_comprehensive_pipeline_verification()
    
    print(f"\n{'='*60}")
    if success:
        print("üéâ VERIFICA√á√ÉO COMPLETA: TODOS OS PROBLEMAS CORRIGIDOS!")
        print("‚úÖ Sistema totalmente funcional")
    else:
        print("üí• VERIFICA√á√ÉO COMPLETA: AINDA H√Å PROBLEMAS!")
        print("‚ùå Corre√ß√µes adicionais necess√°rias")
    print(f"{'='*60}")