#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Debug final da montagem do roteiro completo
"""

import sys
sys.path.insert(0, '.')

from services.storyteller_service import StorytellerService
import re

def debug_final_script():
    """Debug da montagem final do roteiro"""
    
    print("üîç DEBUG DA MONTAGEM FINAL DO ROTEIRO")
    print("=" * 50)
    
    service = StorytellerService()
    
    # TESTE 1: COM remo√ß√£o de cabe√ßalhos
    print("\n1Ô∏è‚É£ TESTANDO COM remove_chapter_headers=True")
    print("-" * 40)
    
    result_with_removal = service.generate_storyteller_script(
        title="Debug Final",
        premise="Uma hist√≥ria para debug final",
        agent_type="millionaire_stories",
        num_chapters=2,
        remove_chapter_headers=True  # PAR√ÇMETRO CR√çTICO
    )
    
    script_with_removal = result_with_removal.get('full_script', '')
    
    print(f"üìù ROTEIRO COM REMO√á√ÉO:")
    print(f"Tamanho: {len(script_with_removal)} caracteres")
    
    # Contar cabe√ßalhos markdown
    markdown_headers = len(re.findall(r'^##\s*.*?[Cc]ap√≠tulo', script_with_removal, re.MULTILINE | re.IGNORECASE))
    internal_headers = len(re.findall(r'CAP√çTULO\s*\d+', script_with_removal, re.IGNORECASE))
    
    print(f"Cabe√ßalhos markdown (## Cap√≠tulo): {markdown_headers}")
    print(f"Cabe√ßalhos internos (CAP√çTULO X:): {internal_headers}")
    print(f"Total de cabe√ßalhos: {markdown_headers + internal_headers}")
    
    print(f"\nPrimeiros 500 caracteres:")
    print(f"'{script_with_removal[:500]}'")
    
    # TESTE 2: SEM remo√ß√£o de cabe√ßalhos
    print("\n\n2Ô∏è‚É£ TESTANDO COM remove_chapter_headers=False")
    print("-" * 40)
    
    result_without_removal = service.generate_storyteller_script(
        title="Debug Final",
        premise="Uma hist√≥ria para debug final",
        agent_type="millionaire_stories",
        num_chapters=2,
        remove_chapter_headers=False  # PAR√ÇMETRO CR√çTICO
    )
    
    script_without_removal = result_without_removal.get('full_script', '')
    
    print(f"üìù ROTEIRO SEM REMO√á√ÉO:")
    print(f"Tamanho: {len(script_without_removal)} caracteres")
    
    # Contar cabe√ßalhos markdown
    markdown_headers = len(re.findall(r'^##\s*.*?[Cc]ap√≠tulo', script_without_removal, re.MULTILINE | re.IGNORECASE))
    internal_headers = len(re.findall(r'CAP√çTULO\s*\d+', script_without_removal, re.IGNORECASE))
    
    print(f"Cabe√ßalhos markdown (## Cap√≠tulo): {markdown_headers}")
    print(f"Cabe√ßalhos internos (CAP√çTULO X:): {internal_headers}")
    print(f"Total de cabe√ßalhos: {markdown_headers + internal_headers}")
    
    print(f"\nPrimeiros 500 caracteres:")
    print(f"'{script_without_removal[:500]}'")
    
    # AN√ÅLISE COMPARATIVA
    print("\n\nüîç AN√ÅLISE COMPARATIVA DETALHADA")
    print("=" * 50)
    
    with_removal_total = len(re.findall(r'^##\s*.*?[Cc]ap√≠tulo', script_with_removal, re.MULTILINE | re.IGNORECASE)) + len(re.findall(r'CAP√çTULO\s*\d+', script_with_removal, re.IGNORECASE))
    without_removal_total = len(re.findall(r'^##\s*.*?[Cc]ap√≠tulo', script_without_removal, re.MULTILINE | re.IGNORECASE)) + len(re.findall(r'CAP√çTULO\s*\d+', script_without_removal, re.IGNORECASE))
    
    print(f"COM remo√ß√£o: {with_removal_total} cabe√ßalhos")
    print(f"SEM remo√ß√£o: {without_removal_total} cabe√ßalhos")
    
    if with_removal_total < without_removal_total:
        print("‚úÖ SUCESSO: A remo√ß√£o de cabe√ßalhos est√° funcionando!")
        print(f"   Redu√ß√£o de {without_removal_total - with_removal_total} cabe√ßalhos")
    elif with_removal_total == without_removal_total:
        print("‚ö†Ô∏è NEUTRO: Mesmo n√∫mero de cabe√ßalhos em ambos os casos")
    else:
        print("‚ùå PROBLEMA: COM remo√ß√£o tem MAIS cabe√ßalhos que SEM remo√ß√£o")
        print("   Isso indica um problema na l√≥gica")
    
    # Salvar para an√°lise
    with open('debug_script_with_removal.txt', 'w', encoding='utf-8') as f:
        f.write("ROTEIRO COM REMO√á√ÉO DE CABE√áALHOS (remove_chapter_headers=True)\n")
        f.write("=" * 60 + "\n\n")
        f.write(script_with_removal)
    
    with open('debug_script_without_removal.txt', 'w', encoding='utf-8') as f:
        f.write("ROTEIRO SEM REMO√á√ÉO DE CABE√áALHOS (remove_chapter_headers=False)\n")
        f.write("=" * 60 + "\n\n")
        f.write(script_without_removal)
    
    print("\nüíæ Roteiros salvos em:")
    print("   - debug_script_with_removal.txt")
    print("   - debug_script_without_removal.txt")
    
    print("\nüéØ CONCLUS√ÉO:")
    if with_removal_total == 0:
        print("   ‚úÖ PERFEITO: Remo√ß√£o completa de cabe√ßalhos funcionando!")
    elif with_removal_total < without_removal_total:
        print("   ‚úÖ BOM: Remo√ß√£o parcial funcionando, mas pode ser melhorada")
    else:
        print("   ‚ùå PROBLEMA: L√≥gica de remo√ß√£o n√£o est√° funcionando corretamente")

if __name__ == "__main__":
    debug_final_script()