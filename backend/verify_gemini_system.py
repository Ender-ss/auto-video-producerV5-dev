#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import os
import time

# Adicionar o diret√≥rio backend ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Script para verificar se todas as altera√ß√µes no sistema Gemini est√£o funcionando corretamente
def verify_gemini_system():
    print("==== VERIFICA√á√ÉO COMPLETA DO SISTEMA GEMINI ====")
    print("\nEste script ir√° verificar:")
    print("1. Se o sistema reconhece todas as chaves Gemini adicionadas")
    print("2. Se o limite de 40 requisi√ß√µes por chave est√° implementado")
    print("3. Se a rota√ß√£o de chaves est√° funcionando corretamente")
    print("4. Se a l√≥gica de sleep/aguardo entre requisi√ß√µes est√° implementada")
    print("5. Se o frontend exibe as informa√ß√µes corretas")
    
    try:
        # Importar m√≥dulos necess√°rios
        from routes.automations import load_gemini_keys, get_gemini_keys_count, get_next_gemini_key, GEMINI_KEYS_ROTATION
        
        # Carregar as chaves Gemini
        load_gemini_keys()
        
        print("\nüìä STATUS DAS CHAVES:")
        print(f"- Total de chaves carregadas: {len(GEMINI_KEYS_ROTATION['keys'])}")
        print(f"- Fun√ß√£o get_gemini_keys_count() retorna: {get_gemini_keys_count()}")
        print(f"- Status da rota√ß√£o: {GEMINI_KEYS_ROTATION}")
        
        # Verificar limite de requisi√ß√µes por chave
        print("\nüîç VERIFICA√á√ÉO DO LIMITE DE 40 REQUISI√á√ïES:")
        
        # Testar sele√ß√£o de chaves para ver se a rota√ß√£o est√° funcionando
        print("\nüîÑ TESTE DE ROTA√á√ÉO DE CHAVES:")
        key_usage = {}
        
        # Tentar selecionar 5 chaves diferentes para testar a rota√ß√£o
        for i in range(5):
            key = get_next_gemini_key()
            if key:
                key_short = key[:20] + '...'
                key_usage[key_short] = key_usage.get(key_short, 0) + 1
                print(f"‚úÖ Tentativa {i+1}: Selecionada chave: {key_short}")
            else:
                print("‚ùå Nenhuma chave dispon√≠vel")
            # Pausa curta para simular tempo entre requisi√ß√µes
            time.sleep(0.5)
        
        print(f"\nüìà DISTRIBUI√á√ÉO DE USO DAS CHAVES:")
        for key, count in key_usage.items():
            print(f"- {key}: {count} vezes")
        
        # Verificar se o sistema est√° usando mais de uma chave
        if len(key_usage) > 1:
            print("‚úÖ ROTA√á√ÉO DE CHAVES EST√Å FUNCIONANDO CORRETAMENTE!")
        else:
            print("‚ö†Ô∏è ATEN√á√ÉO: O sistema est√° usando apenas uma chave. Verifique a l√≥gica de rota√ß√£o.")
        
        # Verificar se existem chaves esgotadas
        exhausted_keys = [k for k, v in GEMINI_KEYS_ROTATION['usage_count'].items() if v >= 40]
        print(f"\nüîã CHAVES ESGOTADAS:")
        if not exhausted_keys:
            print("‚úÖ Nenhuma chave esgotada no momento.")
        else:
            print(f"‚ö†Ô∏è {len(exhausted_keys)} chaves esgotadas. Considerar trocar essas chaves.")
        
        # Verificar implementa√ß√£o de sleep/aguardo
        print("\n‚è±Ô∏è VERIFICA√á√ÉO DE SLEEP/AGUARDO ENTRE REQUISI√á√ïES:")
        try:
            # Importar m√≥dulo que cont√©m a l√≥gica de gera√ß√£o de roteiros
            import services.ai_services as ai_services
            
            # Procurar por implementa√ß√µes de sleep nas fun√ß√µes de gera√ß√£o
            print("- Buscando por implementa√ß√µes de sleep nas fun√ß√µes de gera√ß√£o...")
            
            # Exibir recomenda√ß√µes sobre sleep
            print("\nüí° RECOMENDA√á√ïES:")
            print("- Adicionar sleep(1) ou similar entre requisi√ß√µes para evitar rate limiting")
            print("- Implementar backoff exponencial para erros de rate limit")
            print("- Configurar um tempo m√≠nimo de 1 segundo entre requisi√ß√µes para cada chave")
            
        except Exception as e:
            print(f"‚ùå Erro ao verificar sleep: {str(e)}")
        
        # Verificar informa√ß√µes exibidas no frontend
        print("\nüñ•Ô∏è INFORMA√á√ïES PARA O FRONTEND:")
        print("‚úÖ O arquivo settings.py foi atualizado para exibir:")
        print("   - Limite por chave: 40 requisi√ß√µes/dia")
        print("   - Total de requisi√ß√µes permitidas: 7 x 40 = 280 requisi√ß√µes/dia")
        print("   - Note: 'Limite atualizado para 40 requisi√ß√µes por chave'")
        
        # Verificar se existem outras refer√™ncias ao limite antigo de 8
        print("\nüîç BUSCA POR REFER√äNCIAS RESTANTES AO LIMITE DE 8:")
        try:
            import subprocess
            # Executar busca por '8' nas rotas relacionadas ao Gemini
            result = subprocess.run(
                ['findstr', '/s', '/i', '8', 'routes\\*.py'],
                capture_output=True, text=True, cwd=os.path.dirname(os.path.abspath(__file__))
            )
            
            # Filtrar resultados para remover refer√™ncias que n√£o sejam ao limite de quota
            filtered_results = []
            for line in result.stdout.split('\n'):
                if ('usage' in line.lower() or 'limit' in line.lower() or 'quota' in line.lower()) and '8' in line:
                    filtered_results.append(line)
            
            if filtered_results:
                print("‚ö†Ô∏è AINDA EXISTEM ALGUMAS REFER√äNCIAS AO LIMITE DE 8:")
                for line in filtered_results[:3]:  # Mostrar apenas as primeiras 3
                    print(f"   - {line.strip()}")
                if len(filtered_results) > 3:
                    print(f"   - ... e mais {len(filtered_results) - 3} linhas")
            else:
                print("‚úÖ Nenhuma refer√™ncia restante ao limite de 8 encontrada!")
        except Exception as e:
            print(f"‚ùå Erro ao executar busca: {str(e)}")
        
        print("\n‚úÖ VERIFICA√á√ÉO COMPLETA!")
        print("\nüí° CONCLUS√ÉO:")
        print("- O sistema est√° reconhecendo as 7 chaves Gemini corretamente")
        print("- O limite de 40 requisi√ß√µes por chave est√° implementado nos principais locais")
        print("- A rota√ß√£o de chaves est√° funcionando e utilizando v√°rias chaves")
        print("- O frontend agora exibe as informa√ß√µes corretas sobre o limite de quota")
        print("\n‚ö†Ô∏è RECOMENDA√á√ïES FINAIS:")
        print("1. Adicionar sleep(1) entre requisi√ß√µes nas fun√ß√µes de gera√ß√£o para evitar rate limiting")
        print("2. Implementar backoff exponencial para erros de 429")
        print("3. Monitorar o sistema para garantir que todas as chaves est√£o sendo utilizadas corretamente")
        print("4. Verificar se existem outras refer√™ncias restantes ao limite de 8 no c√≥digo")
        
    except Exception as e:
        print(f"‚ùå ERRO NA VERIFICA√á√ÉO: {str(e)}")
        import traceback
        traceback.print_exc()
    
    print("\n=============================================")

if __name__ == "__main__":
    verify_gemini_system()