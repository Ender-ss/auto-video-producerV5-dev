#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para verificar dados do Redis que possam conter "Arthur Blackwood"
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    import redis
    import json
    from services.redis_cache_service import cache_service
except ImportError as e:
    print(f"‚ùå Erro de importa√ß√£o: {e}")
    print("üí° Tentando verifica√ß√£o sem Redis...")
    cache_service = None

def check_redis_for_arthur():
    """Verifica se h√° dados no Redis contendo Arthur Blackwood"""
    print("üîç VERIFICANDO DADOS DO REDIS")
    print("=" * 50)
    
    if not cache_service or not cache_service.connected:
        print("‚ùå Redis n√£o est√° conectado")
        print("üí° Verificando cache em mem√≥ria...")
        
        if hasattr(cache_service, '_memory_cache'):
            memory_cache = cache_service._memory_cache
            print(f"üìä Cache em mem√≥ria tem {len(memory_cache)} entradas")
            
            arthur_found = False
            for key, value in memory_cache.items():
                value_str = str(value).lower()
                if 'arthur' in value_str or 'blackwood' in value_str:
                    print(f"‚ö†Ô∏è  ENCONTRADO em cache de mem√≥ria:")
                    print(f"   Chave: {key}")
                    print(f"   Valor: {value}")
                    arthur_found = True
            
            if not arthur_found:
                print("‚úÖ Nenhuma refer√™ncia a Arthur Blackwood no cache de mem√≥ria")
        else:
            print("‚úÖ Nenhum cache em mem√≥ria encontrado")
        return
    
    try:
        # Conecta ao Redis
        redis_client = cache_service.redis_client
        
        # Lista todas as chaves
        all_keys = redis_client.keys('*')
        print(f"üìä Total de chaves no Redis: {len(all_keys)}")
        
        arthur_found = False
        
        for key in all_keys:
            try:
                # Obt√©m o valor
                value = redis_client.get(key)
                if value:
                    # Verifica se cont√©m Arthur Blackwood
                    value_str = str(value).lower()
                    if 'arthur' in value_str or 'blackwood' in value_str:
                        print(f"‚ö†Ô∏è  ENCONTRADO no Redis:")
                        print(f"   Chave: {key}")
                        print(f"   Valor: {value[:200]}...")  # Primeiros 200 chars
                        arthur_found = True
                        
                        # Tenta fazer parse JSON para ver estrutura
                        try:
                            parsed = json.loads(value)
                            print(f"   Estrutura JSON: {type(parsed)}")
                            if isinstance(parsed, dict):
                                for k, v in parsed.items():
                                    if 'arthur' in str(v).lower() or 'blackwood' in str(v).lower():
                                        print(f"     Campo '{k}': {v}")
                        except:
                            pass
                        print()
            except Exception as e:
                print(f"‚ùå Erro ao verificar chave {key}: {e}")
        
        if not arthur_found:
            print("‚úÖ Nenhuma refer√™ncia a Arthur Blackwood encontrada no Redis")
            
        # Mostra estat√≠sticas do cache
        stats = cache_service.get_cache_stats()
        print(f"\nüìä ESTAT√çSTICAS DO CACHE:")
        for key, value in stats.items():
            print(f"   {key}: {value}")
            
    except Exception as e:
        print(f"‚ùå Erro ao verificar Redis: {e}")

def check_specific_patterns():
    """Verifica padr√µes espec√≠ficos que podem conter dados antigos"""
    print("\nüîç VERIFICANDO PADR√ïES ESPEC√çFICOS")
    print("=" * 50)
    
    if not cache_service or not cache_service.connected:
        print("‚ùå Redis n√£o conectado, pulando verifica√ß√£o de padr√µes")
        return
        
    patterns_to_check = [
        'premise:*',
        'story:*', 
        'breakpoints:*',
        'chapter:*',
        'context:*',
        'cache:*'
    ]
    
    try:
        redis_client = cache_service.redis_client
        
        for pattern in patterns_to_check:
            keys = redis_client.keys(pattern)
            print(f"üìã Padr√£o '{pattern}': {len(keys)} chaves")
            
            for key in keys[:5]:  # Verifica apenas as primeiras 5 de cada padr√£o
                try:
                    value = redis_client.get(key)
                    if value and ('arthur' in str(value).lower() or 'blackwood' in str(value).lower()):
                        print(f"   ‚ö†Ô∏è  ENCONTRADO em {key}")
                        print(f"      Valor: {str(value)[:100]}...")
                except Exception as e:
                    print(f"   ‚ùå Erro ao verificar {key}: {e}")
                    
    except Exception as e:
        print(f"‚ùå Erro ao verificar padr√µes: {e}")

def clear_suspicious_data():
    """Limpa dados suspeitos se encontrados"""
    print("\nüßπ LIMPEZA DE DADOS SUSPEITOS")
    print("=" * 50)
    
    if not cache_service or not cache_service.connected:
        print("‚ùå Redis n√£o conectado, limpeza limitada")
        
        # Limpa cache em mem√≥ria se existir
        if hasattr(cache_service, '_memory_cache'):
            cache_service._memory_cache.clear()
            print("‚úÖ Cache em mem√≥ria limpo")
        return
    
    try:
        # Limpa todos os caches relacionados a hist√≥rias/premissas
        patterns_to_clear = [
            'premise:*',
            'story:*', 
            'context:*'
        ]
        
        total_cleared = 0
        redis_client = cache_service.redis_client
        
        for pattern in patterns_to_clear:
            keys = redis_client.keys(pattern)
            if keys:
                deleted = redis_client.delete(*keys)
                total_cleared += deleted
                print(f"üóëÔ∏è  Padr√£o '{pattern}': {deleted} chaves removidas")
        
        print(f"\n‚úÖ Total de {total_cleared} chaves removidas do Redis")
        
        # Tamb√©m limpa o cache de breakpoints por seguran√ßa
        breakpoints_cleared = cache_service.clear_cache()
        print(f"‚úÖ Cache de breakpoints limpo: {breakpoints_cleared} chaves")
        
    except Exception as e:
        print(f"‚ùå Erro na limpeza: {e}")

if __name__ == "__main__":
    print("üöÄ VERIFICA√á√ÉO COMPLETA DO REDIS")
    print("=" * 50)
    
    # 1. Verifica dados atuais
    check_redis_for_arthur()
    
    # 2. Verifica padr√µes espec√≠ficos
    check_specific_patterns()
    
    # 3. Limpa dados suspeitos
    clear_suspicious_data()
    
    print("\nüéâ VERIFICA√á√ÉO CONCLU√çDA!")
    print("üí° Se o problema persistir, pode ser:")
    print("   1. Dados vindos da API externa (Gemini/OpenAI)")
    print("   2. Exemplos em prompts de sistema n√£o detectados")
    print("   3. Cache de modelo de linguagem")
    print("   4. Dados persistentes em banco de dados")