#!/usr/bin/env python3
"""
Script para gerar roteiro de teste com Storyteller Unlimited
Agente: millionaire_stories
Cap√≠tulos: 5
"""

import sys
import os
import json
from datetime import datetime

# Adicionar diret√≥rio ao path
sys.path.insert(0, '.')

print('=== CRIANDO ROTEIRO DE TESTE COM STORYTELLER ===')

# Importar servi√ßo
try:
    from services.storyteller_service import storyteller_service
    print('‚úÖ Storyteller Service carregado')
except Exception as e:
    print(f'‚ùå Erro ao carregar servi√ßo: {e}')
    exit(1)

# Configura√ß√µes do teste seguindo STORYTELLER_UNLIMITED_IMPLEMENTATION.md
titulo = 'De Mendigo a Magnata: A Jornada de Rafael Silva'
premissa = '''
Rafael Silva era um jovem de 22 anos que vivia nas ruas de S√£o Paulo, 
survindo de esmolas e recolhendo latinhas. Ap√≥s salvar um empres√°rio 
bilion√°rio de um assalto, ele recebe uma oportunidade √∫nica: trabalhar 
como office-boy na maior empresa do pa√≠s. A hist√≥ria acompanha sua 
jornada desde a vida nas ruas at√© se tornar o CEO de um imp√©rio 
financeiro, enfrentando corrup√ß√£o, trai√ß√µes e desafios inimagin√°veis.
'''

print(f'üìã T√≠tulo: {titulo}')
print(f'üìã Cap√≠tulos: 5')
print(f'üìã Agente: millionaire_stories')
print(f'üìã Configura√ß√£o: {storyteller_service.agent_configs["millionaire_stories"]}')

# Gerar roteiro
print('\nüîÑ Gerando roteiro com Storyteller...')
resultado = storyteller_service.generate_storyteller_script(
    title=titulo,
    premise=premissa,
    agent_type='millionaire_stories',
    num_chapters=5
)

if resultado.get('success'):
    print('‚úÖ ROTEIRO GERADO COM SUCESSO!')
    
    # Criar pasta de teste
    pasta_teste = 'roteiro_teste'
    if not os.path.exists(pasta_teste):
        os.makedirs(pasta_teste)
        print(f'üìÅ Pasta {pasta_teste} criada')
    
    # Salvar roteiro completo em JSON
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    arquivo_roteiro = f'{pasta_teste}/roteiro_milionario_5cap_{timestamp}.json'
    
    with open(arquivo_roteiro, 'w', encoding='utf-8') as f:
        json.dump(resultado, f, ensure_ascii=False, indent=2)
    
    print(f'üíæ Roteiro JSON salvo em: {arquivo_roteiro}')
    
    # Criar vers√£o leg√≠vel em texto
    arquivo_txt = f'{pasta_teste}/roteiro_milionario_5cap_{timestamp}.txt'
    with open(arquivo_txt, 'w', encoding='utf-8') as f:
        f.write(f'=== ROTEIRO: {titulo} ===\n\n')
        f.write(f'Premissa: {premissa.strip()}\n\n')
        f.write(f'Total de caracteres: {len(resultado.get("full_script", ""))}\n')
        f.write(f'N√∫mero de cap√≠tulos: {len(resultado.get("chapters", []))}\n')
        
        # Detalhes de configura√ß√£o
        config = storyteller_service.agent_configs['millionaire_stories']
        f.write(f'Configura√ß√£o usada: {config}\n\n')
        
        # Detalhes de cada cap√≠tulo
        for i, cap in enumerate(resultado.get('chapters', []), 1):
            f.write(f'\n--- CAP√çTULO {i} ---\n')
            f.write(f'Tamanho: {len(cap.get("content", ""))} caracteres\n')
            f.write(f'Valida√ß√£o: {cap.get("validation", {})}\n')
            f.write('\nCONTE√öDO:\n')
            f.write(cap.get('content', ''))
            f.write('\n' + '='*80 + '\n')
    
    print(f'üíæ Vers√£o leg√≠vel salva em: {arquivo_txt}')
    
    # Criar relat√≥rio de verifica√ß√£o
    arquivo_relatorio = f'{pasta_teste}/relatorio_verificacao_{timestamp}.txt'
    with open(arquivo_relatorio, 'w', encoding='utf-8') as f:
        f.write('=== RELAT√ìRIO DE VERIFICA√á√ÉO ===\n\n')
        f.write('Verifica√ß√£o baseada em STORYTELLER_UNLIMITED_IMPLEMENTATION.md:\n\n')
        
        # Verificar estrutura
        f.write('1. ESTRUTURA DO ROTEIRO:\n')
        f.write(f'   ‚úì T√≠tulo presente: {bool(resultado.get("title"))}\n')
        f.write(f'   ‚úì Premissa presente: {bool(resultado.get("premise"))}\n')
        f.write(f'   ‚úì Conte√∫do completo: {bool(resultado.get("full_script"))}\n')
        f.write(f'   ‚úì Cap√≠tulos divididos: {len(resultado.get("chapters", []))}\n')
        
        # Verificar configura√ß√µes do agente
        chapters = resultado.get('chapters', [])
        if chapters:
            f.write('\n2. CONFIGURA√á√ïES DO AGENTE MILION√ÅRIO:\n')
            config = storyteller_service.agent_configs['millionaire_stories']
            f.write(f'   - Min chars por cap√≠tulo: {config["min_chars"]}\n')
            f.write(f'   - Max chars por cap√≠tulo: {config["max_chars"]}\n')
            f.write(f'   - Target chars por cap√≠tulo: {config["target_chars"]}\n')
            
            # Verificar tamanhos dos cap√≠tulos
            f.write('\n3. AN√ÅLISE DE TAMANHO DOS CAP√çTULOS:\n')
            for i, cap in enumerate(chapters, 1):
                length = len(cap.get('content', ''))
                status = "‚úì OK" if config['min_chars'] <= length <= config['max_chars'] else "‚ùå FORA DO LIMITE"
                f.write(f'   Cap√≠tulo {i}: {length} chars - {status}\n')
        
        # Verificar valida√ß√£o
        f.write('\n4. VALIDA√á√ÉO DE CAP√çTULOS:\n')
        all_valid = True
        for i, cap in enumerate(chapters, 1):
            validation = cap.get('validation', {})
            is_valid = validation.get('valid', False)
            status = "‚úì V√ÅLIDO" if is_valid else "‚ùå PROBLEMAS"
            f.write(f'   Cap√≠tulo {i}: {status}\n')
            if not is_valid:
                f.write(f'     Issues: {validation.get("issues", [])}\n')
                all_valid = False
        
        f.write(f'\n5. STATUS FINAL: {"‚úÖ ROTEIRO V√ÅLIDO" if all_valid else "‚ùå NECESSITA AJUSTES"}\n')
        
        # Informa√ß√µes t√©cnicas
        f.write('\n6. INFORMA√á√ïES T√âCNICAS:\n')
        f.write(f'   - API Key usada: {resultado.get("api_key_used", "N/A")[:15]}...\n')
        f.write(f'   - Timestamp: {timestamp}\n')
        f.write(f'   - Total caracteres: {len(resultado.get("full_script", ""))}\n')
    
    print(f'üìä Relat√≥rio de verifica√ß√£o salvo em: {arquivo_relatorio}')
    
    # Resumo final
    print('\nüìä RESUMO DO TESTE:')
    print(f'   ‚úÖ T√≠tulo: {resultado.get("title", "N/A")}')
    print(f'   ‚úÖ Cap√≠tulos: {len(resultado.get("chapters", []))}')
    print(f'   ‚úÖ Total caracteres: {len(resultado.get("full_script", ""))}')
    print(f'   ‚úÖ API Key: {resultado.get("api_key_used", "N/A")[:15]}...')
    print(f'   ‚úÖ Arquivos salvos em: {pasta_teste}/')
    
else:
    print(f'‚ùå Erro na gera√ß√£o: {resultado.get("error", "Erro desconhecido")}')
    if 'traceback' in resultado:
        print('Detalhes:', resultado.get('traceback'))