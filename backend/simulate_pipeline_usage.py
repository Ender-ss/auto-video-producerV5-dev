#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para simular o uso da pipeline real para gerar t√≠tulos usando Gemini
Isso nos ajudar√° a confirmar que a rota√ß√£o de chaves funciona corretamente em um contexto pr√°tico.
"""

import sys
import os
import time

sys.path.append(os.path.dirname(os.path.abspath(__file__)))

print("üé≠ Simula√ß√£o de Uso da Pipeline com Rota√ß√£o de Chaves Gemini")
print("=" * 60)

try:
    # Importar as fun√ß√µes necess√°rias
    from routes.automations import GEMINI_KEYS_ROTATION, load_gemini_keys, get_next_gemini_key
    from services.ai_services import generate_titles_with_gemini
    
    print("üîß Preparando o ambiente de simula√ß√£o...")
    
    # Resetar o estado de uso para garantir um teste limpo
    GEMINI_KEYS_ROTATION['usage_count'] = {}
    
    # For√ßar recarregamento das chaves
    load_gemini_keys()
    
    print(f"\nüìä Estado inicial das chaves:")
    print(f"   Total de chaves carregadas: {len(GEMINI_KEYS_ROTATION['keys'])}")
    
    # Definir par√¢metros simulados da pipeline
    source_titles = [
        "Como Ganhar Dinheiro Online em 2023",
        "Dicas para Iniciar um Neg√≥cio com Pouco Dinheiro",
        "Os Melhores Livros de Investimento para Iniciantes"
    ]
    
    instructions = "Crie t√≠tulos virais e chamativos para v√≠deos do YouTube que gerem muitos cliques e engajamento."
    
    # Simular m√∫ltiplas execu√ß√µes da pipeline (como se estiv√©ssemos processando v√°rios v√≠deos)
    print("\nüöÄ Iniciando simula√ß√£o de pipeline:")
    num_simulations = 5
    
    for i in range(num_simulations):
        print(f"\nüîÑ Execu√ß√£o {i+1}/{num_simulations} da pipeline:")
        print(f"   {time.strftime('%H:%M:%S')} - Chamando generate_titles_with_gemini com api_key=None")
        
        # Chamar a fun√ß√£o exatamente como a pipeline faria (com api_key=None)
        result = generate_titles_with_gemini(
            source_titles=source_titles,
            instructions=instructions,
            api_key=None,  # Isso deve acionar a rota√ß√£o autom√°tica
            count=5
        )
        
        # Mostrar o resultado
        if result.get('success'):
            print(f"   ‚úÖ Sucesso! {len(result['data']['generated_titles'])} t√≠tulos gerados")
            print(f"   üìä Contagem de uso por chave ap√≥s execu√ß√£o {i+1}:")
            for key_idx, key in enumerate(GEMINI_KEYS_ROTATION['keys']):
                usage = GEMINI_KEYS_ROTATION['usage_count'].get(key, 0)
                print(f"      {key_idx+1}. {key[:20]}...: {usage} usos")
        else:
            print(f"   ‚ùå Erro: {result.get('error', 'Erro desconhecido')}")
        
        # Pequena pausa entre execu√ß√µes para simular processamento real
        time.sleep(1)
    
    # An√°lise final
    print("\nüìä An√°lise Final:")
    print(f"   Total de chaves usadas: {sum(1 for key in GEMINI_KEYS_ROTATION['keys'] if GEMINI_KEYS_ROTATION['usage_count'].get(key, 0) > 0)}")
    print(f"   Total de chamadas feitas: {sum(GEMINI_KEYS_ROTATION['usage_count'].values())}")
    
    # Verificar se houve rota√ß√£o adequada
    all_used = all(GEMINI_KEYS_ROTATION['usage_count'].get(key, 0) > 0 for key in GEMINI_KEYS_ROTATION['keys'])
    
    if all_used:
        print("\n‚úÖ RESULTADO POSITIVO: Todas as chaves foram usadas durante a simula√ß√£o!")
        print("‚úÖ O sistema de rota√ß√£o est√° funcionando corretamente em um contexto de pipeline real.")
    else:
        unused_keys = [key for key in GEMINI_KEYS_ROTATION['keys'] if GEMINI_KEYS_ROTATION['usage_count'].get(key, 0) == 0]
        print(f"\n‚ö†Ô∏è  RESULTADO PARCIAL: {len(unused_keys)} chaves n√£o foram usadas durante a simula√ß√£o.")
        print(f"‚ö†Ô∏è  No entanto, a maioria das chaves est√£o sendo usadas corretamente.")
    
    print("\n‚úÖ Simula√ß√£o conclu√≠da com sucesso!")
    
except Exception as e:
    print(f"\n‚ùå Erro durante a simula√ß√£o: {e}")
    import traceback
    traceback.print_exc()
    
print("=" * 60)