#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Sistema de Mensagens de Erro Amig√°veis
Transforma erros t√©cnicos em mensagens compreens√≠veis para o usu√°rio final
"""

def get_user_friendly_error(error_type, original_error="", context=""):
    """
    Converte erros t√©cnicos em mensagens amig√°veis para o usu√°rio
    
    Args:
        error_type (str): Tipo do erro (api_key, quota, network, etc.)
        original_error (str): Mensagem de erro original
        context (str): Contexto onde o erro ocorreu
    
    Returns:
        dict: Mensagem estruturada com t√≠tulo, descri√ß√£o e sugest√µes
    """
    
    error_messages = {
        # Erros de API Key
        'api_key_missing': {
            'title': 'üîë Chave de API Necess√°ria',
            'message': 'Para usar este recurso, voc√™ precisa configurar uma chave de API v√°lida.',
            'suggestions': [
                'V√° para Configura√ß√µes ‚Üí Chaves de API',
                'Adicione sua chave de API para o servi√ßo selecionado',
                'Verifique se a chave est√° correta e ativa'
            ]
        },
        
        'api_key_invalid': {
            'title': '‚ùå Chave de API Inv√°lida',
            'message': 'A chave de API fornecida n√£o √© v√°lida ou expirou.',
            'suggestions': [
                'Verifique se a chave foi copiada corretamente',
                'Confirme se a chave n√£o expirou',
                'Gere uma nova chave no painel do provedor'
            ]
        },
        
        # Erros de Quota
        'quota_exceeded': {
            'title': 'üìä Limite de Uso Atingido',
            'message': 'Voc√™ atingiu o limite de uso da sua conta para este servi√ßo.',
            'suggestions': [
                'Aguarde at√© o pr√≥ximo per√≠odo de renova√ß√£o',
                'Considere fazer upgrade do seu plano',
                'Use um provedor alternativo temporariamente'
            ]
        },
        
        'rate_limit': {
            'title': '‚è±Ô∏è Muitas Requisi√ß√µes',
            'message': 'Voc√™ est√° fazendo muitas requisi√ß√µes muito rapidamente.',
            'suggestions': [
                'Aguarde alguns minutos antes de tentar novamente',
                'Reduza a quantidade de conte√∫do gerado por vez',
                'O sistema tentar√° automaticamente em alguns instantes'
            ]
        },
        
        # Erros de Rede
        'network_error': {
            'title': 'üåê Problema de Conex√£o',
            'message': 'N√£o foi poss√≠vel conectar com o servi√ßo externo.',
            'suggestions': [
                'Verifique sua conex√£o com a internet',
                'Tente novamente em alguns minutos',
                'O servi√ßo pode estar temporariamente indispon√≠vel'
            ]
        },
        
        'timeout_error': {
            'title': '‚è∞ Tempo Limite Excedido',
            'message': 'A opera√ß√£o demorou mais tempo que o esperado.',
            'suggestions': [
                'Tente novamente com um conte√∫do menor',
                'Verifique sua conex√£o com a internet',
                'O servi√ßo pode estar sobrecarregado'
            ]
        },
        
        # Erros de Conte√∫do
        'content_blocked': {
            'title': 'üö´ Conte√∫do Bloqueado',
            'message': 'O conte√∫do foi bloqueado pelas pol√≠ticas de seguran√ßa do provedor.',
            'suggestions': [
                'Revise o conte√∫do para remover termos sens√≠veis',
                'Tente reformular o texto de forma mais neutra',
                'Use um provedor alternativo'
            ]
        },
        
        'content_too_long': {
            'title': 'üìè Conte√∫do Muito Longo',
            'message': 'O conte√∫do excede o limite m√°ximo permitido.',
            'suggestions': [
                'Divida o conte√∫do em partes menores',
                'Reduza o tamanho do texto',
                'Use um modelo que suporte mais tokens'
            ]
        },
        
        # Erros de Valida√ß√£o
        'validation_error': {
            'title': '‚ö†Ô∏è Dados Inv√°lidos',
            'message': 'Alguns dados fornecidos n√£o est√£o no formato correto.',
            'suggestions': [
                'Verifique se todos os campos obrigat√≥rios est√£o preenchidos',
                'Confirme se os dados est√£o no formato esperado',
                'Tente recarregar a p√°gina e tentar novamente'
            ]
        },
        
        # Erros de Sistema
        'internal_error': {
            'title': 'üîß Erro Interno',
            'message': 'Ocorreu um erro interno no sistema.',
            'suggestions': [
                'Tente novamente em alguns minutos',
                'Se o problema persistir, reporte o erro',
                'Verifique se todos os servi√ßos est√£o funcionando'
            ]
        },
        
        # Erros de Pipeline
        'pipeline_dependency': {
            'title': 'üîó Depend√™ncia N√£o Atendida',
            'message': 'Esta etapa depende de outras etapas que ainda n√£o foram conclu√≠das.',
            'suggestions': [
                'Complete as etapas anteriores primeiro',
                'Verifique se n√£o h√° erros nas etapas anteriores',
                'Reinicie o pipeline se necess√°rio'
            ]
        },
        
        'pipeline_failed': {
            'title': '‚öôÔ∏è Falha no Pipeline',
            'message': 'O pipeline de automa√ß√£o encontrou um erro e foi interrompido.',
            'suggestions': [
                'Verifique os logs para mais detalhes',
                'Corrija os problemas identificados',
                'Reinicie o pipeline ap√≥s as corre√ß√µes'
            ]
        }
    }
    
    # Retorna a mensagem correspondente ou uma mensagem gen√©rica
    if error_type in error_messages:
        error_info = error_messages[error_type].copy()
        if context:
            error_info['context'] = context
        if original_error:
            error_info['technical_details'] = original_error
        return error_info
    else:
        return {
            'title': '‚ùì Erro Desconhecido',
            'message': 'Ocorreu um erro inesperado.',
            'suggestions': [
                'Tente novamente em alguns minutos',
                'Verifique sua conex√£o e configura√ß√µes',
                'Se o problema persistir, reporte o erro'
            ],
            'technical_details': original_error if original_error else 'Erro n√£o especificado'
        }

def detect_error_type(error_message):
    """
    Detecta o tipo de erro baseado na mensagem de erro original
    
    Args:
        error_message (str): Mensagem de erro original
    
    Returns:
        str: Tipo do erro detectado
    """
    error_message_lower = error_message.lower()
    
    # Erros de API Key
    if any(keyword in error_message_lower for keyword in ['api key', 'unauthorized', 'invalid key', 'authentication']):
        if 'missing' in error_message_lower or 'required' in error_message_lower:
            return 'api_key_missing'
        else:
            return 'api_key_invalid'
    
    # Erros de Quota
    if any(keyword in error_message_lower for keyword in ['quota', 'limit', 'exceeded', 'insufficient']):
        return 'quota_exceeded'
    
    # Erros de Rate Limit
    if any(keyword in error_message_lower for keyword in ['429', 'too many requests', 'rate limit']):
        return 'rate_limit'
    
    # Erros de Rede
    if any(keyword in error_message_lower for keyword in ['connection', 'network', 'unreachable', 'dns']):
        return 'network_error'
    
    # Erros de Timeout
    if any(keyword in error_message_lower for keyword in ['timeout', 'timed out', 'time limit']):
        return 'timeout_error'
    
    # Erros de Conte√∫do
    if any(keyword in error_message_lower for keyword in ['safety', 'blocked', 'policy', 'inappropriate']):
        return 'content_blocked'
    
    if any(keyword in error_message_lower for keyword in ['too long', 'max tokens', 'length']):
        return 'content_too_long'
    
    # Erros de Valida√ß√£o
    if any(keyword in error_message_lower for keyword in ['validation', 'invalid', 'required', 'missing']):
        return 'validation_error'
    
    # Erros de Pipeline
    if any(keyword in error_message_lower for keyword in ['dependency', 'prerequisite', 'depends']):
        return 'pipeline_dependency'
    
    if any(keyword in error_message_lower for keyword in ['pipeline', 'workflow', 'automation']):
        return 'pipeline_failed'
    
    # Erro gen√©rico
    return 'internal_error'

def format_error_response(error_type, original_error="", context=""):
    """
    Formata uma resposta de erro completa para APIs
    
    Args:
        error_type (str): Tipo do erro
        original_error (str): Mensagem de erro original
        context (str): Contexto onde o erro ocorreu
    
    Returns:
        dict: Resposta formatada para API
    """
    error_info = get_user_friendly_error(error_type, original_error, context)
    
    return {
        'success': False,
        'error': error_info['message'],
        'error_details': {
            'title': error_info['title'],
            'message': error_info['message'],
            'suggestions': error_info['suggestions'],
            'type': error_type
        },
        'technical_details': error_info.get('technical_details', ''),
        'context': error_info.get('context', '')
    }

def auto_format_error(original_error, context=""):
    """
    Detecta automaticamente o tipo de erro e formata a resposta
    
    Args:
        original_error (str): Mensagem de erro original
        context (str): Contexto onde o erro ocorreu
    
    Returns:
        dict: Resposta formatada para API
    """
    error_type = detect_error_type(str(original_error))
    return format_error_response(error_type, str(original_error), context)