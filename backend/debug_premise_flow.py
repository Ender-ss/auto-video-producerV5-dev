#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from services.script_processing_service import ScriptProcessingService
import re

def count_premises(text):
    """Conta quantas premissas existem no texto"""
    patterns = [
        r'\*\*PREMISSA:\*\*.*?(?=\n\n|\n[A-Z]|$)',
        r'Premissa:.*?(?=\n\n|\n[A-Z]|$)',
        r'\*PREMISSA\*:.*?(?=\n\n|\n[A-Z]|$)',
        r'\*\*PREMISSA\*\*:.*?(?=\n\n|\n[A-Z]|$)'
    ]
    
    total = 0
    for pattern in patterns:
        matches = re.findall(pattern, text, re.IGNORECASE | re.DOTALL)
        total += len(matches)
        if matches:
            print(f"   Padr√£o '{pattern}' encontrou {len(matches)} ocorr√™ncias")
    
    return total

def debug_process_script():
    print("üîç DEBUG DETALHADO DO PROCESS_SCRIPT")
    print("=" * 60)
    
    # Script de teste
    test_script = """
**PREMISSA:** Era uma vez um jovem empreendedor que sonhava em construir um imp√©rio digital.

Cap√≠tulo 1: O In√≠cio

Jo√£o sempre teve o sonho de ser um empres√°rio de sucesso. Desde pequeno, ele observava os grandes nomes do mundo dos neg√≥cios e imaginava como seria estar no lugar deles.

Premissa: O sucesso vem para aqueles que persistem.

Ele come√ßou vendendo doces na escola, depois passou a vender produtos online. A cada dia que passava, ele se aproximava mais do seu objetivo.

*PREMISSA*: A determina√ß√£o √© a chave para o sucesso.

Cap√≠tulo 2: Os Desafios

Nem tudo foram flores no caminho de Jo√£o.
"""
    
    print(f"üìù Script original tem {count_premises(test_script)} premissas")
    
    # Inicializar servi√ßo
    service = ScriptProcessingService()
    
    # Configura√ß√£o de teste
    config = {
        'remove_premise': True,
        'remove_chapter_headers': True,
        'remove_markdown': True
    }
    
    print(f"‚öôÔ∏è Configura√ß√£o: {config}")
    
    # Simular o fluxo interno do process_script
    print("\nüîÑ SIMULANDO FLUXO INTERNO:")
    print("-" * 40)
    
    # 1. Valida√ß√£o
    print("1Ô∏è‚É£ Valida√ß√£o de entrada...")
    try:
        validation_result = service.validate_input(test_script, config)
        if not validation_result:
            print("‚ùå Valida√ß√£o falhou")
            return
        print("‚úÖ Valida√ß√£o passou")
    except Exception as e:
        print(f"‚ùå Erro na valida√ß√£o: {e}")
    
    # 2. Mesclagem de configura√ß√£o
    print("\n2Ô∏è‚É£ Mesclagem de configura√ß√£o...")
    merged_config = {**service.default_config, **config}
    print(f"üìã Configura√ß√£o mesclada: {merged_config}")
    
    # 3. Aplicar processamento
    print("\n3Ô∏è‚É£ Aplicando processamento...")
    try:
        processed_script = service._apply_processing(test_script, merged_config)
        print(f"‚úÖ Processamento conclu√≠do")
        print(f"üìä Script processado tem {count_premises(processed_script)} premissas")
        
        # Mostrar resultado
        print("\nüìÑ RESULTADO FINAL:")
        print("-" * 40)
        print(processed_script[:500] + "..." if len(processed_script) > 500 else processed_script)
        
    except Exception as e:
        print(f"‚ùå Erro no processamento: {e}")
        import traceback
        traceback.print_exc()
    
    # 4. Teste direto do m√©todo process_script
    print("\n\nüß™ TESTE DIRETO DO PROCESS_SCRIPT")
    print("=" * 60)
    
    try:
        result = service.process_script('test-pipeline', test_script, config)
        
        if result['success']:
            final_script = result['processed_script']
            final_count = count_premises(final_script)
            print(f"‚úÖ Process_script executado com sucesso")
            print(f"üìä Script final tem {final_count} premissas")
            
            if final_count == 0:
                print("üéâ SUCESSO: Filtro funcionando!")
            else:
                print("‚ùå FALHA: Premissas ainda presentes")
                print("\nüìÑ Script final:")
                print("-" * 40)
                print(final_script[:500] + "..." if len(final_script) > 500 else final_script)
        else:
            print(f"‚ùå Process_script falhou: {result.get('error', 'Erro desconhecido')}")
            
    except Exception as e:
        print(f"‚ùå Erro no process_script: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    debug_process_script()