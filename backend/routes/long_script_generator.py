import time
import json
import requests
import os
import sys
import hashlib
import time
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Callable, Tuple
import pickle
from routes.automations import get_next_gemini_key, handle_gemini_429_error
from routes.automations import save_to_cache, get_from_cache, get_gemini_keys_count

def gerar_com_gemini(prompt, title_generator=None):
    """Fun√ß√£o para gerar conte√∫do usando API do Gemini com tratamento de erros e rota√ß√£o natural de chaves"""
    import google.generativeai as genai
    from routes.automations import get_next_gemini_key, handle_gemini_429_error, get_gemini_keys_count
    
    # Usar a quantidade real de chaves dispon√≠veis
    max_retries = get_gemini_keys_count() if get_gemini_keys_count() > 0 else 1
    print(f"üîë Usando {max_retries} chaves Gemini para scripts longos")
    last_error = None
    
    for attempt in range(max_retries):
        try:
            # Obter a pr√≥xima chave Gemini dispon√≠vel
            api_key = get_next_gemini_key()
            if not api_key:
                raise Exception("Nenhuma chave Gemini dispon√≠vel")
            
            print(f"üîë Tentativa {attempt + 1}/{max_retries} com chave Gemini: {api_key[:20]}...")
            
            # Configurar a API do Gemini
            genai.configure(api_key=api_key)
            
            # Usar o modelo Gemini 1.5 Flash
            model = genai.GenerativeModel('gemini-1.5-flash')
            
            # Gerar conte√∫do
            response = model.generate_content(prompt)
            
            if response and hasattr(response, 'text') and response.text:
                print(f"‚úÖ Conte√∫do gerado com sucesso na tentativa {attempt + 1}")
                return response.text
            else:
                raise Exception("Resposta vazia da API Gemini")
                
        except Exception as e:
            last_error = e
            error_str = str(e)
            print(f"‚ùå Erro na tentativa {attempt + 1}/{max_retries}: {e}")
            
            # Verificar se √© um erro 429 (quota excedida)
            if "429" in error_str or "quota" in error_str.lower() or "exceeded" in error_str.lower():
                print(f"‚ö†Ô∏è Erro 429/quota na tentativa {attempt + 1}/{max_retries}: {e}")
                # Tentar obter uma nova chave, passando a chave atual como par√¢metro
                handle_gemini_429_error(error_str, api_key)
                time.sleep(1)  # Pausa otimizada antes de tentar novamente
                continue
            else:
                # Para outros erros, registrar e tentar pr√≥xima chave
                print(f"‚ö†Ô∏è Erro n√£o relacionado √† quota, tentando pr√≥xima chave...")
                if attempt < max_retries - 1:
                    continue
                else:
                    break
    
    # Se todas as tentativas falharam, lan√ßar o √∫ltimo erro
    raise Exception(f"Falha ao gerar conte√∫do com Gemini ap√≥s {max_retries} tentativas. √öltimo erro: {last_error}")

def gerar_com_openai(prompt, title_generator=None):
    """Fun√ß√£o para gerar conte√∫do usando API do OpenAI como fallback"""
    if not title_generator or not title_generator.openai_client:
        raise Exception("Cliente OpenAI n√£o configurado")
    
    try:
        response = title_generator.openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "Voc√™ √© um roteirista profissional especializado em conte√∫do para YouTube."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=1000,
            temperature=0.8
        )
        
        if response and response.choices and len(response.choices) > 0:
            return response.choices[0].message.content
        else:
            raise Exception("Resposta vazia da API OpenAI")
    except Exception as e:
        print(f"‚ùå Erro na API OpenAI: {e}")
        raise Exception(f"Falha ao gerar conte√∫do com OpenAI: {e}")

def gerar_com_openrouter(prompt, model, api_key):
    """Fun√ß√£o para gerar conte√∫do usando API do OpenRouter como fallback"""
    try:
        if model == 'auto':
            model = 'anthropic/claude-3.5-sonnet'
        
        headers = {
            'Authorization': f'Bearer {api_key}',
            'Content-Type': 'application/json',
            'HTTP-Referer': 'http://localhost:5173',
            'X-Title': 'Auto Video Producer'
        }
        
        response = requests.post(
            'https://openrouter.ai/api/v1/chat/completions',
            headers=headers,
            json={
                'model': model,
                'messages': [
                    {'role': 'system', 'content': 'Voc√™ √© um roteirista profissional especializado em conte√∫do para YouTube.'},
                    {'role': 'user', 'content': prompt}
                ],
                'max_tokens': 1000,
                'temperature': 0.8
            },
            timeout=60
        )
        
        if response.status_code == 200:
            data = response.json()
            content = data['choices'][0]['message']['content']
            return content
        else:
            raise Exception(f'OpenRouter API error: {response.status_code}')
    except Exception as e:
        print(f"‚ùå Erro na API OpenRouter: {e}")
        raise Exception(f"Falha ao gerar conte√∫do com OpenRouter: {e}")

def gerar_conteudo(prompt, title_generator=None, openrouter_api_key=None, openrouter_model='auto'):
    """Fun√ß√£o unificada para gerar conte√∫do com fallback entre provedores"""
    erros = []
    
    # Tentar primeiro com Gemini
    try:
        print("üîç [GEMINI] Tentando gerar conte√∫do com Gemini...")
        return gerar_com_gemini(prompt, title_generator)
    except Exception as e:
        erro_gemini = str(e)
        erros.append(f"Gemini: {erro_gemini}")
        print(f"‚ö†Ô∏è [GEMINI] Falha: {erro_gemini}")
        
        # Verificar se foi falha de quota/esgotamento
        if "429" in erro_gemini or "quota" in erro_gemini.lower() or "exceeded" in erro_gemini.lower() or "esgotad" in erro_gemini.lower():
            print("‚ö†Ô∏è [GEMINI] Falha por quota esgotada. Tentando fallback para outros provedores...")
    
    # Fallback para OpenAI
    try:
        print("üîç [OPENAI] Tentando gerar conte√∫do com OpenAI...")
        return gerar_com_openai(prompt, title_generator)
    except Exception as e:
        erro_openai = str(e)
        erros.append(f"OpenAI: {erro_openai}")
        print(f"‚ö†Ô∏è [OPENAI] Falha: {erro_openai}")
    
    # Fallback para OpenRouter
    if openrouter_api_key:
        try:
            print("üîç [OPENROUTER] Tentando gerar conte√∫do com OpenRouter...")
            return gerar_com_openrouter(prompt, openrouter_model, openrouter_api_key)
        except Exception as e:
            erro_openrouter = str(e)
            erros.append(f"OpenRouter: {erro_openrouter}")
            print(f"‚ö†Ô∏è [OPENROUTER] Falha: {erro_openrouter}")
    
    # Se todos falharam, fornecer detalhes dos erros
    detalhes_erros = "\n".join(erros)
    print(f"‚ùå [FALHA GERAL] Todos os provedores de IA falharam. Detalhes:\n{detalhes_erros}")
    
    # Verificar se a falha principal foi do Gemini (quota)
    gemini_quota_error = any("429" in erro or "quota" in erro.lower() or "exceeded" in erro.lower() for erro in erros if "Gemini:" in erro)
    
    if gemini_quota_error:
        mensagem_erro = f"Falha na gera√ß√£o de roteiro: O Gemini atingiu o limite de quota di√°rio. Tente novamente mais tarde ou configure mais chaves Gemini.\n\nDetalhes dos erros:\n{detalhes_erros}"
    else:
        mensagem_erro = f"Falha na gera√ß√£o de roteiro: Todos os provedores de IA falharam.\n\nDetalhes dos erros:\n{detalhes_erros}"
    
    raise Exception(mensagem_erro)

def validar_capitulo(capitulo, min_palavras=350, max_palavras=650):
    """Valida se o cap√≠tulo atende aos requisitos m√≠nimos"""
    if not capitulo or not isinstance(capitulo, str):
        return False, "Cap√≠tulo inv√°lido ou vazio"
    
    # Verificar tamanho aproximado (500 palavras com margem mais flex√≠vel)
    palavras = capitulo.split()
    if len(palavras) < min_palavras:  # M√≠nimo de 350 palavras
        return False, f"Cap√≠tulo muito curto: {len(palavras)} palavras (m√≠nimo: {min_palavras})"
    
    if len(palavras) > max_palavras:  # M√°ximo de 650 palavras
        return False, f"Cap√≠tulo muito longo: {len(palavras)} palavras (m√°ximo: {max_palavras})"
    
    # Verificar coer√™ncia b√°sica (se tem frases completas) - crit√©rio mais flex√≠vel
    frases = [f.strip() for f in capitulo.split('.') if f.strip()]
    if len(frases) < 3:  # M√≠nimo de 3 frases
        return False, f"Cap√≠tulo com poucas frases: {len(frases)} frases (m√≠nimo: 3)"
    
    # Verificar se h√° par√°grafos estruturados - crit√©rio mais flex√≠vel
    paragrafos = [p.strip() for p in capitulo.split('\n\n') if p.strip()]
    if len(paragrafos) < 1:  # M√≠nimo de 1 par√°grafo
        return False, f"Cap√≠tulo com pouca estrutura: {len(paragrafos)} par√°grafos (m√≠nimo: 1)"
    
    return True, f"Cap√≠tulo v√°lido: {len(palavras)} palavras, {len(frases)} frases, {len(paragrafos)} par√°grafos"

def gerar_resumo_capitulo(capitulo):
    """Gera um resumo conciso com 3-4 frases de um cap√≠tulo"""
    prompt_resumo = f"""
    Analise o seguinte cap√≠tulo e crie um resumo conciso com 3-4 frases:
    
    {capitulo}
    
    O resumo deve focar nos eventos principais e a√ß√µes dos personagens,
    sem incluir detalhes excessivos. Ser√° usado como contexto para o pr√≥ximo cap√≠tulo.
    """
    
    return prompt_resumo

def get_chapter_summary_cache_dir() -> str:
    """
    Retorna o diret√≥rio de cache para resumos de cap√≠tulos.
    
    Returns:
        str: Caminho para o diret√≥rio de cache
    """
    cache_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))), "cache", "chapter_summaries")
    os.makedirs(cache_dir, exist_ok=True)
    return cache_dir

def clear_chapter_summary_cache(max_age_hours: int = 24) -> int:
    """
    Limpa o cache de resumos de cap√≠tulos mais antigos que max_age_hours.
    
    Args:
        max_age_hours: Idade m√°xima em horas para manter os itens no cache
        
    Returns:
        int: N√∫mero de itens removidos do cache
    """
    cache_dir = get_chapter_summary_cache_dir()
    removed_count = 0
    
    if not os.path.exists(cache_dir):
        return removed_count
    
    current_time = datetime.now()
    max_age = timedelta(hours=max_age_hours)
    
    for filename in os.listdir(cache_dir):
        file_path = os.path.join(cache_dir, filename)
        if os.path.isfile(file_path):
            file_mtime = datetime.fromtimestamp(os.path.getmtime(file_path))
            if current_time - file_mtime > max_age:
                os.remove(file_path)
                removed_count += 1
    
    return removed_count

def generate_long_script_with_context(titulo, premissa, numero_capitulos, title_generator=None, openrouter_api_key=None, openrouter_model='auto', update_callback=None, long_script_prompt=None, custom_prompts=None, request_config=None):
    """
    Gera um roteiro longo com cap√≠tulos sequenciais e resumos contextuais entre cap√≠tulos.
    
    Args:
        titulo (str): T√≠tulo do roteiro
        premissa (str): Premissa do roteiro
        numero_capitulos (int): N√∫mero de cap√≠tulos a serem gerados
        title_generator: Objeto com configura√ß√µes de IA
        openrouter_api_key (str): Chave da API do OpenRouter
        openrouter_model (str): Modelo do OpenRouter a ser usado
        update_callback (function): Fun√ß√£o de callback para atualiza√ß√µes de progresso
        long_script_prompt (str): Prompt personalizado adicional (antigo m√©todo)
        custom_prompts (dict): Prompts personalizados por fase {'intro': str, 'middle': str, 'conclusion': str, 'default_prompts': dict}
        request_config (dict): Configura√ß√£o da requisi√ß√£o incluindo agent_prompts para agentes especializados
        
    Returns:
        dict: Dicion√°rio com o roteiro gerado e informa√ß√µes adicionais
    """
    # Iniciar medi√ß√£o de performance
    start_time = time.time()
    
    # Inicializar request_config se n√£o fornecido
    if request_config is None:
        request_config = {}
    
    try:
        print(f"üöÄ Iniciando gera√ß√£o de roteiro longo: {titulo}")
        print(f"üìñ N√∫mero de cap√≠tulos: {numero_capitulos}")
        print(f"üìä T√≠tulo: {titulo}")
        print(f"üìù Premissa: {premissa[:100]}{'...' if len(premissa) > 100 else ''}")
        
        # Inicializar arrays para armazenar cap√≠tulos e resumos
        capitulos = []
        resumos = []
        chapter_generation_times = []
        summary_generation_times = []
        
        # Processar prompts personalizados
        prompts = {
            'intro': None,
            'middle': None, 
            'conclusion': None,
            'use_default': True
        }
        
        if custom_prompts:
            # Usar prompts personalizados por fase se fornecidos
            if custom_prompts.get('custom_inicio'):
                prompts['intro'] = custom_prompts['custom_inicio']
                prompts['use_default'] = False
            if custom_prompts.get('custom_meio'):
                prompts['middle'] = custom_prompts['custom_meio']
                prompts['use_default'] = False
            if custom_prompts.get('custom_fim'):
                prompts['conclusion'] = custom_prompts['custom_fim']
                prompts['use_default'] = False
                
            # Usar prompts padr√£o editados se fornecidos
            if custom_prompts.get('default_prompt_intro'):
                prompts['default_intro'] = custom_prompts['default_prompt_intro']
            if custom_prompts.get('default_prompt_middle'):
                prompts['default_middle'] = custom_prompts['default_prompt_middle']
            if custom_prompts.get('default_prompt_conclusion'):
                prompts['default_conclusion'] = custom_prompts['default_prompt_conclusion']
        
        # Limpar cache antigo antes de come√ßar
        cleared_cache = clear_chapter_summary_cache(max_age_hours=48)
        if cleared_cache > 0:
            print(f"üßπ Limpos {cleared_cache} itens do cache antigo")
        
        # 2.2. Gera√ß√£o do Cap√≠tulo 1 (Introdu√ß√£o)
        print("üìù Gerando Cap√≠tulo 1 (Introdu√ß√£o)")
        
        # Escolher prompt para introdu√ß√£o
        if prompts.get('intro'):  # Prompt personalizado de introdu√ß√£o
            prompt_base = prompts['intro']
            prompt_capitulo_1 = prompt_base.format(
                titulo=titulo, 
                premissa=premissa,
                i=1
            )
            print("‚ú® Usando prompt personalizado para introdu√ß√£o")
        elif prompts.get('default_intro'):  # Prompt padr√£o editado
            prompt_capitulo_1 = prompts['default_intro'].format(
                titulo=titulo,
                premissa=premissa
            )
            print("üîß Usando prompt padr√£o editado para introdu√ß√£o")
        else:  # Prompt padr√£o do sistema ou agente especializado
            # Verificar se h√° agente especializado ativo
            agent_prompts = request_config.get('agent_prompts', {})
            if agent_prompts and 'inicio' in agent_prompts:
                prompt_capitulo_1 = agent_prompts['inicio'].format(
                    titulo=titulo,
                    premissa=premissa
                )
                print("üéÜ Usando prompt de agente especializado para introdu√ß√£o")
            else:
                prompt_capitulo_1 = f"""
        Voc√™ √© um roteirista profissional especializado em conte√∫do para YouTube.
        
        T√çTULO: {titulo}
        PREMISSA: {premissa}
        
        INSTRU√á√ïES:
        - Escreva o primeiro cap√≠tulo (introdu√ß√£o) deste roteiro
        - O cap√≠tulo deve ter aproximadamente 500 palavras
        - Estabele√ßa os personagens principais, cen√°rio e conflito inicial
        - Use uma linguagem envolvente adequada para v√≠deos do YouTube
        - Escreva apenas o conte√∫do do cap√≠tulo, sem t√≠tulos ou marca√ß√µes
        {f'\n        {long_script_prompt}' if long_script_prompt else ''}
        """
                print("üìÑ Usando prompt padr√£o do sistema para introdu√ß√£o")
        
        # Gerar Cap√≠tulo 1 com valida√ß√£o e retentativas
        max_tentativas = get_gemini_keys_count() if get_gemini_keys_count() > 0 else 3
        print(f"üîë Usando {max_tentativas} chaves Gemini dispon√≠veis para gera√ß√£o do Cap√≠tulo 1")
        capitulo_1_valido = False
        tentativa = 0
        chapter_start_time = time.time()
        
        while not capitulo_1_valido and tentativa < max_tentativas:
            print(f"üìù Gerando Cap√≠tulo 1 (Tentativa {tentativa + 1}/{max_tentativas})")
            attempt_start_time = time.time()
            
            capitulo_1 = gerar_conteudo(prompt_capitulo_1, title_generator, openrouter_api_key, openrouter_model)
            
            # Medir tempo de gera√ß√£o
            attempt_time = time.time() - attempt_start_time
            print(f"‚è±Ô∏è Cap√≠tulo 1 (tentativa {tentativa + 1}) gerado em {attempt_time:.2f} segundos")
            
            # Validar cap√≠tulo
            capitulo_valido, mensagem = validar_capitulo(capitulo_1)
            if capitulo_valido:
                capitulo_1_valido = True
                print(f"‚úÖ Cap√≠tulo 1 validado: {mensagem}")
            else:
                print(f"‚ùå Cap√≠tulo 1 inv√°lido: {mensagem}")
                tentativa += 1
                if tentativa < max_tentativas:
                    print("üîÑ Tentando gerar novamente...")
                    time.sleep(1)  # Pausa otimizada antes de tentar novamente
        
        if not capitulo_1_valido:
            raise Exception(f"N√£o foi poss√≠vel gerar um Cap√≠tulo 1 v√°lido ap√≥s {max_tentativas} tentativas")
        
        # Medir tempo total de gera√ß√£o do cap√≠tulo
        chapter_total_time = time.time() - chapter_start_time
        chapter_generation_times.append(chapter_total_time)
        print(f"‚è±Ô∏è Cap√≠tulo 1 gerado em {chapter_total_time:.2f} segundos (total com {tentativa + 1} tentativas)")
        
        capitulos.append(capitulo_1)
        
        if update_callback:
            progress = (1 / numero_capitulos) * 100
            update_callback({
                'progress': progress,
                'current_chapter': 1,
                'total_chapters': numero_capitulos,
                'chapters': [{'chapter_number': 1, 'title': 'Introdu√ß√£o', 'content': capitulo_1}]
            })
        
        # 2.3. Gera√ß√£o do Resumo do Cap√≠tulo 1 com cache
        print("üìù Gerando Resumo do Cap√≠tulo 1")
        summary_start_time = time.time()
        
        # Verificar cache para resumo do cap√≠tulo 1
        hash_capitulo_1 = hashlib.md5(capitulo_1.encode()).hexdigest()
        cache_key = f"chapter_summary_{hash_capitulo_1}"
        
        resumo_1 = get_from_cache(cache_key, {}, cache_subdir="chapter_summaries")
        
        if resumo_1 is None:
            print("üîÑ Cache n√£o encontrado, gerando novo resumo")
            prompt_resumo_1 = gerar_resumo_capitulo(capitulo_1)
            resumo_1 = gerar_conteudo(prompt_resumo_1, title_generator, openrouter_api_key, openrouter_model)
            
            # Salvar no cache
            save_to_cache(cache_key, {}, resumo_1, cache_subdir="chapter_summaries")
            print("üíæ Resumo salvo no cache")
        else:
            print("‚úÖ Resumo recuperado do cache")
        
        # Medir tempo de gera√ß√£o do resumo
        summary_time = time.time() - summary_start_time
        summary_generation_times.append(summary_time)
        print(f"‚è±Ô∏è Resumo do Cap√≠tulo 1 gerado em {summary_time:.2f} segundos")
        
        resumos.append(resumo_1)
        
        # Pausa para evitar limite de taxa
        time.sleep(3)
        
        # 2.4. Loop para Cap√≠tulos Seguintes (2 a N-1)
        for i in range(2, numero_capitulos):
            print(f"üìù Gerando Cap√≠tulo {i}")
            
            # Escolher prompt para desenvolvimento
            if prompts.get('middle'):  # Prompt personalizado para meio
                prompt_base = prompts['middle']
                prompt_capitulo = prompt_base.format(
                    titulo=titulo,
                    premissa=premissa,
                    i=i,
                    resumo_anterior=resumos[i-2]
                )
                print(f"‚ú® Usando prompt personalizado para Cap√≠tulo {i}")
            elif prompts.get('default_middle'):  # Prompt padr√£o editado
                prompt_capitulo = prompts['default_middle'].format(
                    titulo=titulo,
                    premissa=premissa,
                    i=i,
                    resumo_anterior=resumos[i-2]
                )
                print(f"üîß Usando prompt padr√£o editado para Cap√≠tulo {i}")
            else:  # Prompt padr√£o do sistema ou agente especializado
                # Verificar se h√° agente especializado ativo
                agent_prompts = request_config.get('agent_prompts', {})
                if agent_prompts and 'meio' in agent_prompts:
                    # Substituir vari√°veis contextuais no prompt do agente
                    prompt_capitulo = agent_prompts['meio'].format(
                        titulo=titulo,
                        premissa=premissa
                    )
                    # Substituir manualmente a vari√°vel de resumo contextual
                    prompt_capitulo = prompt_capitulo.replace('{resumos[i-2]}', resumos[i-2])
                    print(f"üéÜ Usando prompt de agente especializado para Cap√≠tulo {i}")
                else:
                    prompt_capitulo = f"""
            Voc√™ √© um roteirista profissional especializado em conte√∫do para YouTube.
            
            T√çTULO: {titulo}
            PREMISSA: {premissa}
            
            CONTEXTO DO CAP√çTULO ANTERIOR:
            {resumos[i-2]}
            
            INSTRU√á√ïES:
            - Escreva o cap√≠tulo {i} deste roteiro, continuando a hist√≥ria
            - O cap√≠tulo deve ter aproximadamente 500 palavras
            - Mantenha coer√™ncia com o contexto fornecido
            - Desenvolva a narrativa de forma org√¢nica
            - Use uma linguagem envolvente adequada para v√≠deos do YouTube
            - Escreva apenas o conte√∫do do cap√≠tulo, sem t√≠tulos ou marca√ß√µes
            {f'\n            {long_script_prompt}' if long_script_prompt else ''}
            """
                    print(f"üìÑ Usando prompt padr√£o do sistema para Cap√≠tulo {i}")
            
            # Gerar cap√≠tulo atual com valida√ß√£o e retentativas
            capitulo_valido = False
            tentativa = 0
            max_tentativas = get_gemini_keys_count() if get_gemini_keys_count() > 0 else 3
            print(f"üîë Usando {max_tentativas} chaves Gemini dispon√≠veis para gera√ß√£o do Cap√≠tulo {i}")
            chapter_start_time = time.time()
            
            while not capitulo_valido and tentativa < max_tentativas:
                print(f"üìù Gerando Cap√≠tulo {i} (Tentativa {tentativa + 1}/{max_tentativas})")
                attempt_start_time = time.time()
                
                capitulo_atual = gerar_conteudo(prompt_capitulo, title_generator, openrouter_api_key, openrouter_model)
                
                # Medir tempo de gera√ß√£o
                attempt_time = time.time() - attempt_start_time
                print(f"‚è±Ô∏è Cap√≠tulo {i} (tentativa {tentativa + 1}) gerado em {attempt_time:.2f} segundos")
                
                # Validar cap√≠tulo
                capitulo_valido, mensagem = validar_capitulo(capitulo_atual)
                if capitulo_valido:
                    print(f"‚úÖ Cap√≠tulo {i} validado: {mensagem}")
                else:
                    print(f"‚ùå Cap√≠tulo {i} inv√°lido: {mensagem}")
                    tentativa += 1
                    if tentativa < max_tentativas:
                        print("üîÑ Tentando gerar novamente...")
                        time.sleep(1)  # Pausa otimizada antes de tentar novamente
            
            if not capitulo_valido:
                raise Exception(f"N√£o foi poss√≠vel gerar um Cap√≠tulo {i} v√°lido ap√≥s {max_tentativas} tentativas")
            
            # Medir tempo total de gera√ß√£o do cap√≠tulo
            chapter_total_time = time.time() - chapter_start_time
            chapter_generation_times.append(chapter_total_time)
            print(f"‚è±Ô∏è Cap√≠tulo {i} gerado em {chapter_total_time:.2f} segundos (total com {tentativa + 1} tentativas)")
            
            capitulos.append(capitulo_atual)
            
            # Gerar resumo do cap√≠tulo atual com cache
            summary_start_time = time.time()
            
            hash_capitulo_atual = hashlib.md5(capitulo_atual.encode()).hexdigest()
            cache_key = f"chapter_summary_{hash_capitulo_atual}"
            
            resumo_atual = get_from_cache(cache_key, {}, cache_subdir="chapter_summaries")
            
            if resumo_atual is None:
                print(f"üîÑ Cache n√£o encontrado para Cap√≠tulo {i}, gerando novo resumo")
                prompt_resumo = gerar_resumo_capitulo(capitulo_atual)
                resumo_atual = gerar_conteudo(prompt_resumo, title_generator, openrouter_api_key, openrouter_model)
                
                # Salvar no cache
                save_to_cache(cache_key, {}, resumo_atual, cache_subdir="chapter_summaries")
                print(f"üíæ Resumo do Cap√≠tulo {i} salvo no cache")
            else:
                print(f"‚úÖ Resumo do Cap√≠tulo {i} recuperado do cache")
            
            # Medir tempo de gera√ß√£o do resumo
            summary_time = time.time() - summary_start_time
            summary_generation_times.append(summary_time)
            print(f"‚è±Ô∏è Resumo do Cap√≠tulo {i} gerado em {summary_time:.2f} segundos")
            
            resumos.append(resumo_atual)
            
            if update_callback:
                progress = (i / numero_capitulos) * 100
                chapters_data = []
                for j, cap in enumerate(capitulos):
                    chapters_data.append({
                        'chapter_number': j + 1,
                        'title': f"Cap√≠tulo {j + 1}",
                        'content': cap
                    })
                
                update_callback({
                    'progress': progress,
                    'current_chapter': i,
                    'total_chapters': numero_capitulos,
                    'chapters': chapters_data
                })
            
            # Pausa para evitar limite de taxa
            time.sleep(3)
        
        # 2.5. Gera√ß√£o do Cap√≠tulo Final (Conclus√£o)
        if numero_capitulos > 1:
            print(f"üìù Gerando Cap√≠tulo Final (Conclus√£o)")
            
            # Escolher prompt para conclus√£o
            if prompts.get('conclusion'):  # Prompt personalizado para conclus√£o
                prompt_base = prompts['conclusion']
                prompt_conclusao = prompt_base.format(
                    titulo=titulo,
                    premissa=premissa,
                    resumo_anterior=resumos[-1]
                )
                print("‚ú® Usando prompt personalizado para conclus√£o")
            elif prompts.get('default_conclusion'):  # Prompt padr√£o editado
                prompt_conclusao = prompts['default_conclusion'].format(
                    titulo=titulo,
                    premissa=premissa,
                    resumo_anterior=resumos[-1]
                )
                print("üîß Usando prompt padr√£o editado para conclus√£o")
            else:  # Prompt padr√£o do sistema ou agente especializado
                # Verificar se h√° agente especializado ativo
                agent_prompts = request_config.get('agent_prompts', {})
                if agent_prompts and 'fim' in agent_prompts:
                    # Substituir vari√°veis contextuais no prompt do agente
                    prompt_conclusao = agent_prompts['fim'].format(
                        titulo=titulo,
                        premissa=premissa
                    )
                    # Substituir manualmente a vari√°vel de resumo contextual
                    prompt_conclusao = prompt_conclusao.replace('{resumos[-1]}', resumos[-1])
                    print("üéÜ Usando prompt de agente especializado para conclus√£o")
                else:
                    prompt_conclusao = f"""
            Voc√™ √© um roteirista profissional especializado em conte√∫do para YouTube.
            
            T√çTULO: {titulo}
            PREMISSA: {premissa}
            
            CONTEXTO DO CAP√çTULO ANTERIOR:
            {resumos[-1]}
            
            INSTRU√á√ïES:
            - Escreva o cap√≠tulo final (conclus√£o) deste roteiro
            - O cap√≠tulo deve ter aproximadamente 500 palavras
            - Amarre todas as pontas soltas da hist√≥ria
            - Proporcione um fechamento satisfat√≥rio para os personagens
            - Use uma linguagem envolvente adequada para v√≠deos do YouTube
            - Escreva apenas o conte√∫do do cap√≠tulo, sem t√≠tulos ou marca√ß√µes
            {f'\n            {long_script_prompt}' if long_script_prompt else ''}
            """
                    print("üìÑ Usando prompt padr√£o do sistema para conclus√£o")
            
            # Gerar Cap√≠tulo Final com valida√ß√£o e retentativas
            capitulo_final_valido = False
            tentativa = 0
            max_tentativas = get_gemini_keys_count() if get_gemini_keys_count() > 0 else 3
            print(f"üîë Usando {max_tentativas} chaves Gemini dispon√≠veis para gera√ß√£o do Cap√≠tulo Final")
            chapter_start_time = time.time()
            
            while not capitulo_final_valido and tentativa < max_tentativas:
                print(f"üìù Gerando Cap√≠tulo Final (Tentativa {tentativa + 1}/{max_tentativas})")
                attempt_start_time = time.time()
                
                capitulo_final = gerar_conteudo(prompt_conclusao, title_generator, openrouter_api_key, openrouter_model)
                
                # Medir tempo de gera√ß√£o
                attempt_time = time.time() - attempt_start_time
                print(f"‚è±Ô∏è Cap√≠tulo Final (tentativa {tentativa + 1}) gerado em {attempt_time:.2f} segundos")
                
                # Validar cap√≠tulo final
                capitulo_valido, mensagem = validar_capitulo(capitulo_final)
                if capitulo_valido:
                    capitulo_final_valido = True
                    print(f"‚úÖ Cap√≠tulo Final validado: {mensagem}")
                else:
                    print(f"‚ùå Cap√≠tulo Final inv√°lido: {mensagem}")
                    tentativa += 1
                    if tentativa < max_tentativas:
                        print("üîÑ Tentando gerar novamente...")
                        time.sleep(1)  # Pausa otimizada antes de tentar novamente
            
            if not capitulo_final_valido:
                raise Exception(f"N√£o foi poss√≠vel gerar um Cap√≠tulo Final v√°lido ap√≥s {max_tentativas} tentativas")
            
            # Medir tempo total de gera√ß√£o do cap√≠tulo
            chapter_total_time = time.time() - chapter_start_time
            chapter_generation_times.append(chapter_total_time)
            print(f"‚è±Ô∏è Cap√≠tulo Final gerado em {chapter_total_time:.2f} segundos (total com {tentativa + 1} tentativas)")
            
            capitulos.append(capitulo_final)
        
        # 2.6. Concatena√ß√£o Final com Limpeza
        # Aplicar limpeza em cada cap√≠tulo antes de concatenar
        capitulos_limpos = []
        for capitulo in capitulos:
            capitulo_limpo = _clean_narrative_content(capitulo)
            capitulos_limpos.append(capitulo_limpo)
        
        # Unir todos os cap√≠tulos limpos em um √∫nico roteiro
        roteiro_completo = "\n\n".join(capitulos_limpos)
        
        # Roteiro final sem cabe√ßalho t√©cnico (narrativa limpa)
        roteiro_final = roteiro_completo
        
        # Preparar dados de retorno
        chapters_data = []
        for i, cap_limpo in enumerate(capitulos_limpos):
            chapters_data.append({
                'chapter_number': i + 1,
                'title': f"Cap√≠tulo {i + 1}",
                'content': cap_limpo,
                'word_count': len(cap_limpo.split())
            })
        
        # Calcular estat√≠sticas
        word_count = len(roteiro_completo.split())
        estimated_duration = max(word_count / 150, numero_capitulos * 2)  # em minutos
        
        # Calcular estat√≠sticas de performance
        total_time = time.time() - start_time
        avg_chapter_time = sum(chapter_generation_times) / len(chapter_generation_times) if chapter_generation_times else 0
        avg_summary_time = sum(summary_generation_times) / len(summary_generation_times) if summary_generation_times else 0
        
        # Exibir estat√≠sticas de performance
        print("üìä Estat√≠sticas de Performance:")
        print(f"‚è±Ô∏è Tempo total de gera√ß√£o: {total_time:.2f} segundos")
        print(f"‚è±Ô∏è Tempo m√©dio por cap√≠tulo: {avg_chapter_time:.2f} segundos")
        print(f"‚è±Ô∏è Tempo m√©dio por resumo: {avg_summary_time:.2f} segundos")
        print(f"üìù Total de cap√≠tulos gerados: {len(capitulos)}")
        print(f"üìù Total de resumos gerados/cached: {len(resumos)}")
        print(f"‚è±Ô∏è Dura√ß√£o estimada do v√≠deo: {estimated_duration}")
        
        print(f"‚úÖ Roteiro longo gerado com sucesso: {numero_capitulos} cap√≠tulos, {word_count} palavras")
        
        return {
            'success': True,
            'data': {
                'script': roteiro_final.strip(),
                'chapters': chapters_data,
                'estimated_duration': estimated_duration,
                'word_count': word_count,
                'summaries': resumos,
                'title': titulo,
                'premise': premissa,
                'number_of_chapters': numero_capitulos,
                'performance_stats': {
                    'total_generation_time': total_time,
                    'avg_chapter_time': avg_chapter_time,
                    'avg_summary_time': avg_summary_time,
                    'chapter_generation_times': chapter_generation_times,
                    'summary_generation_times': summary_generation_times
                }
            }
        }
        
    except Exception as e:
        print(f"‚ùå Erro na gera√ß√£o de roteiro longo: {e}")
        return {
            'success': False,
            'error': str(e)
        }


def _clean_narrative_content(content: str) -> str:
    """Limpar conte√∫do narrativo de marca√ß√µes t√©cnicas para narrativa flu√≠da
    
    Reutiliza a l√≥gica de limpeza do simple_script_generator.py para manter consist√™ncia
    conforme especifica√ß√£o do projeto de reutilizar fun√ß√µes de limpeza existentes.
    """
    
    import re
    
    # Remover marca√ß√µes de formata√ß√£o
    content = re.sub(r'\*\*([^*]+)\*\*', r'\1', content)  # **texto**
    content = re.sub(r'\*([^*]+)\*', r'\1', content)      # *texto*
    content = re.sub(r'"([^"]+)"', r'\1', content)        # "texto"
    content = re.sub(r'`([^`]+)`', r'\1', content)        # `texto`
    
    # Remover marca√ß√µes de narrador e dire√ß√µes
    content = re.sub(r'Narrador:\s*', '', content, flags=re.IGNORECASE)  # Narrador:
    content = re.sub(r'NARRADOR:\s*', '', content)        # NARRADOR:
    content = re.sub(r'\(Narrador[^)]*\)', '', content, flags=re.IGNORECASE)  # (Narrador...)
    content = re.sub(r'\*\*Narrador[^*]*\*\*', '', content, flags=re.IGNORECASE)  # **Narrador**
    
    # Remover dire√ß√µes de c√¢mera e stage directions
    content = re.sub(r'A c√¢mera[^.]*\.', '', content, flags=re.IGNORECASE)  # A c√¢mera faz um paneo.
    content = re.sub(r'\([^)]*c√¢mera[^)]*\)', '', content, flags=re.IGNORECASE)  # (c√¢mera...)
    content = re.sub(r'\([^)]*[Pp]aneo[^)]*\)', '', content)  # (paneo...)
    content = re.sub(r'\([^)]*[Ss]ussurrando[^)]*\)', '', content)  # (Sussurrando)
    content = re.sub(r'\([^)]*[Cc]lose[^)]*\)', '', content)  # (Close...)
    content = re.sub(r'\([^)]*[Zz]oom[^)]*\)', '', content)  # (Zoom...)
    
    # Remover marca√ß√µes de personagem (Nome:)
    content = re.sub(r'\n[A-Z][a-zA-Z\s]*:\s*\([^)]*\)', '', content)  # Arthur: (Sussurrando)
    content = re.sub(r'\n[A-Z][a-zA-Z\s]*:\s*', '\n', content)  # Arthur: 
    content = re.sub(r'^[A-Z][a-zA-Z\s]*:\s*\([^)]*\)', '', content)  # No in√≠cio
    content = re.sub(r'^[A-Z][a-zA-Z\s]*:\s*', '', content)  # No in√≠cio
    
    # Remover notas t√©cnicas e dire√ß√µes de produ√ß√£o
    content = re.sub(r'\([^)]*[Mm]√∫sica[^)]*\)', '', content)  # (M√∫sica...)
    content = re.sub(r'\([^)]*[Ss]om[^)]*\)', '', content)     # (Som...)
    content = re.sub(r'\([^)]*[Ff]ade[^)]*\)', '', content)    # (Fade...)
    content = re.sub(r'\([^)]*[Cc]orte[^)]*\)', '', content)   # (Corte...)
    content = re.sub(r'\([^)]*[Cc]√¢mera[^)]*\)', '', content)  # (C√¢mera...)
    content = re.sub(r'\([^)]*[Cc]ena[^)]*\)', '', content)    # (Cena...)
    content = re.sub(r'\([^)]*[Ii]magen[^)]*\)', '', content)  # (Imagens...)
    content = re.sub(r'\([^)]*[Ff]oco[^)]*\)', '', content)    # (Foco...)
    content = re.sub(r'\([^)]*[Vv]oz[^)]*\)', '', content)     # (Voz...)
    
    # Remover instru√ß√µes t√©cnicas gen√©ricas entre par√™nteses
    content = re.sub(r'\([^)]*[Ii]nicia[^)]*\)', '', content)  # (Inicia...)
    content = re.sub(r'\([^)]*[Mm]ostra[^)]*\)', '', content)  # (Mostra...)
    content = re.sub(r'\([^)]*[Aa]parece[^)]*\)', '', content) # (Aparece...)
    
    # Remover colchetes com instru√ß√µes
    content = re.sub(r'\[[^]]*\]', '', content)  # [instru√ß√£o]
    
    # Remover t√≠tulos de cap√≠tulos expl√≠citos
    content = re.sub(r'^Cap√≠tulo \d+:.*$', '', content, flags=re.MULTILINE)  # Cap√≠tulo X:
    content = re.sub(r'^CAP√çTULO \d+:.*$', '', content, flags=re.MULTILINE)  # CAP√çTULO X:
    content = re.sub(r'^Cap√≠tulo \d+ -.*$', '', content, flags=re.MULTILINE) # Cap√≠tulo X - T√≠tulo
    
    # Remover informa√ß√µes de dura√ß√£o e estat√≠sticas
    content = re.sub(r'N√öMERO DE CAP√çTULOS:.*\n', '', content)
    content = re.sub(r'ESTIMATIVA DE DURA√á√ÉO:.*\n', '', content)
    content = re.sub(r'T√çTULO:.*\n', '', content)
    content = re.sub(r'PREMISSA:.*\n', '', content)
    
    # Limpar quebras de linha excessivas
    content = re.sub(r'\n\s*\n\s*\n+', '\n\n', content)  # M√∫ltiplas quebras -> 2 quebras
    content = re.sub(r'^\s+', '', content, flags=re.MULTILINE)  # Espa√ßos no in√≠cio das linhas
    
    # Limpar espa√ßos extras
    content = re.sub(r' {2,}', ' ', content)  # M√∫ltiplos espa√ßos -> 1 espa√ßo
    
    # Garantir que frases comecem com mai√∫scula ap√≥s ponto
    content = re.sub(r'\. +([a-z])', lambda m: '. ' + m.group(1).upper(), content)
    
    return content.strip()