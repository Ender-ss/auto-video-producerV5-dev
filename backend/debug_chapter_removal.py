#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Debug detalhado da remo√ß√£o de cabe√ßalhos de cap√≠tulos
"""

import re
from services.storyteller_service import storyteller_service

def debug_chapter_removal():
    """Debug detalhado da remo√ß√£o de cabe√ßalhos"""
    
    print("=== DEBUG DETALHADO DA REMO√á√ÉO DE CABE√áALHOS ===\n")
    
    # Teste com remo√ß√£o de cabe√ßalhos
    print("1. GERANDO ROTEIRO COM remove_chapter_headers=True")
    
    try:
        result = storyteller_service.generate_storyteller_script(
            title="Debug Detalhado",
            premise="Uma hist√≥ria para debug detalhado.",
            agent_type="millionaire_stories",
            num_chapters=2,
            remove_chapter_headers=True
        )
        
        if result.get('success'):
            print("   ‚úÖ Gera√ß√£o bem-sucedida")
            
            # Analisar cap√≠tulos individuais
            chapters = result.get('chapters', [])
            print(f"   üìä N√∫mero de cap√≠tulos: {len(chapters)}")
            
            for i, chapter in enumerate(chapters, 1):
                content = chapter.get('content', '')
                print(f"\n   üìÑ CAP√çTULO {i}:")
                print(f"      Tamanho: {len(content)} caracteres")
                print(f"      Primeiros 200 chars: {repr(content[:200])}")
                
                # Verificar cabe√ßalhos no conte√∫do individual
                headers_in_content = [
                    content.count('## Cap√≠tulo'),
                    content.count('# Cap√≠tulo'),
                    content.count('CAP√çTULO'),
                    content.count('Cap√≠tulo')
                ]
                print(f"      Cabe√ßalhos encontrados: {headers_in_content}")
            
            # Analisar script final
            full_script = result.get('full_script', '')
            print(f"\n   üìú SCRIPT FINAL:")
            print(f"      Tamanho: {len(full_script)} caracteres")
            print(f"      Primeiros 400 chars: {repr(full_script[:400])}")
            
            # Contar todos os tipos de cabe√ßalhos
            headers_count = {
                '## Cap√≠tulo': full_script.count('## Cap√≠tulo'),
                '# Cap√≠tulo': full_script.count('# Cap√≠tulo'),
                'CAP√çTULO': full_script.count('CAP√çTULO'),
                'Cap√≠tulo': full_script.count('Cap√≠tulo')
            }
            
            print(f"      Cabe√ßalhos por tipo: {headers_count}")
            print(f"      Total de cabe√ßalhos: {sum(headers_count.values())}")
            
            # Testar regex manualmente
            print("\n   üîç TESTE MANUAL DAS REGEX:")
            test_content = "## Cap√≠tulo 1\n\nCAP√çTULO 1: Teste\n\nConte√∫do do cap√≠tulo..."
            print(f"      Conte√∫do de teste: {repr(test_content)}")
            
            # Aplicar as mesmas regex do c√≥digo
            cleaned = re.sub(r'^##\s*Cap√≠tulo\s*\d+[:\s]*.*?\n', '', test_content, flags=re.MULTILINE | re.IGNORECASE)
            print(f"      Ap√≥s regex 1: {repr(cleaned)}")
            
            cleaned = re.sub(r'^CAP√çTULO\s*\d+[:\s]*.*?\n', '', cleaned, flags=re.MULTILINE | re.IGNORECASE)
            print(f"      Ap√≥s regex 2: {repr(cleaned)}")
            
        else:
            print(f"   ‚ùå Erro na gera√ß√£o: {result.get('error')}")
            
    except Exception as e:
        print(f"   ‚ùå Exce√ß√£o: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    debug_chapter_removal()