import os
import sys
import subprocess
import shutil
import time
from datetime import datetime

# Configura√ß√µes
target_version = "2.2.1"
log_file = "moviepy_simplificado_log.txt"

def log(message):
    """Registra mensagens no log e imprime no console"""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_message = f"[{timestamp}] {message}"
    print(log_message)
    with open(log_file, "a", encoding="utf-8") as f:
        f.write(log_message + "\n")

def run_command(command, shell=True):
    """Executa um comando e retorna a sa√≠da e o c√≥digo de erro"""
    try:
        result = subprocess.run(
            command, 
            shell=shell, 
            capture_output=True, 
            text=True
        )
        return result.stdout, result.stderr, result.returncode
    except Exception as e:
        return "", str(e), 1

def check_admin():
    """Verifica se o script est√° sendo executado como administrador"""
    if os.name == 'nt':  # Windows
        try:
            # C√≥digo 0 se for admin, 1 se n√£o
            subprocess.check_output(["net", "session"], stderr=subprocess.STDOUT, shell=True)
            return True
        except:
            return False
    return True  # No Linux/Mac, consideramos que tem permiss√µes

def stop_python_processes():
    """Para todos os processos Python em execu√ß√£o"""
    log("Parando processos Python...")
    if os.name == 'nt':
        run_command("taskkill /F /IM python.exe >nul 2>&1")
        run_command("taskkill /F /IM pythonw.exe >nul 2>&1")
    log("Processos Python encerrados.")

def get_python_paths():
    """Obt√©m todos os caminhos de site-packages do Python"""
    python_paths = []
    
    # Adiciona caminhos comuns do site-packages
    username = os.environ.get('USERNAME', '')
    common_paths = [
        f"C:\\Users\\{username}\\AppData\\Roaming\\Python\\Python313\\site-packages",
        "C:\\Program Files\\Python313\\Lib\\site-packages",
        os.path.join(os.path.dirname(sys.executable), "Lib", "site-packages")
    ]
    
    # Adiciona caminhos do sys.path
    for path in sys.path:
        if path and os.path.exists(path) and "site-packages" in path:
            python_paths.append(path)
    
    # Adiciona caminhos comuns e remove duplicatas
    for path in common_paths:
        if path not in python_paths and os.path.exists(path):
            python_paths.append(path)
    
    return python_paths

def remove_moviepy(python_paths):
    """Remove manualmente todas as instala√ß√µes do MoviePy"""
    log("Removendo instala√ß√µes existentes do MoviePy...")
    
    # Primeiro tenta remover via pip
    log("Tentando remover via pip...")
    stdout, stderr, code = run_command(f"{sys.executable} -m pip uninstall -y moviepy")
    
    # Remove manualmente todos os vest√≠gios
    for path in python_paths:
        if os.path.exists(path):
            log(f"Limpando diret√≥rio: {path}")
            
            # Remove diret√≥rio moviepy
            moviepy_dir = os.path.join(path, "moviepy")
            if os.path.exists(moviepy_dir):
                log(f"  - Removendo diret√≥rio: moviepy")
                try:
                    shutil.rmtree(moviepy_dir)
                    log("    - Removido com sucesso")
                except Exception as e:
                    log(f"    - Erro ao remover: {str(e)}")
            
            # Remove arquivos .egg-info e .dist-info
            for item in os.listdir(path):
                if (item.startswith("moviepy-") and 
                    (item.endswith(".egg-info") or item.endswith(".dist-info"))):
                    item_path = os.path.join(path, item)
                    log(f"  - Removendo: {item}")
                    try:
                        if os.path.isdir(item_path):
                            shutil.rmtree(item_path)
                        else:
                            os.remove(item_path)
                        log("    - Removido com sucesso")
                    except Exception as e:
                        log(f"    - Erro ao remover: {str(e)}")

def clean_pip_cache():
    """Limpa o cache do pip"""
    log("Limpando cache do pip...")
    run_command(f"{sys.executable} -m pip cache purge")

def update_pip():
    """Atualiza o pip para a vers√£o mais recente"""
    log("Atualizando o pip...")
    stdout, stderr, code = run_command(f"{sys.executable} -m pip install --upgrade pip")
    if code == 0:
        log("Pip atualizado com sucesso.")
    else:
        log(f"Aten√ß√£o: N√£o foi poss√≠vel atualizar o pip: {stderr}")

def install_dependencies():
    """Instala as depend√™ncias necess√°rias para o MoviePy"""
    log("Instalando depend√™ncias essenciais...")
    dependencies = ["numpy", "imageio", "pillow", "decorator", "proglog", "tqdm"]
    stdout, stderr, code = run_command(
        f"{sys.executable} -m pip install --force-reinstall --no-cache-dir {' '.join(dependencies)}"
    )
    if code == 0:
        log("Depend√™ncias instaladas com sucesso.")
    else:
        log(f"Aten√ß√£o: Erro na instala√ß√£o de depend√™ncias: {stderr}")

def install_moviepy():
    """Instala a vers√£o correta do MoviePy"""
    log(f"Instalando MoviePy vers√£o {target_version}...")
    stdout, stderr, code = run_command(
        f"{sys.executable} -m pip install --force-reinstall --no-cache-dir moviepy=={target_version}"
    )
    if code == 0:
        log(f"MoviePy {target_version} instalado com sucesso!")
        return True
    else:
        log(f"Erro: Falha na instala√ß√£o do MoviePy {target_version}: {stderr}")
        return False

def verify_moviepy():
    """Verifica se a instala√ß√£o do MoviePy est√° funcionando corretamente"""
    log("Executando verifica√ß√£o do MoviePy...")
    
    try:
        # Cria um script de verifica√ß√£o
        verify_script = """import sys
import os
import moviepy
print(f"MoviePy vers√£o: {moviepy.__version__}")
print(f"Localiza√ß√£o: {os.path.dirname(moviepy.__file__)}")

# Verificar conte√∫do do diret√≥rio
dir_content = os.listdir(os.path.dirname(moviepy.__file__))
print("Conte√∫do do diret√≥rio:", ", ".join(dir_content))

# Verificar se editor.py existe
editor_path = os.path.join(os.path.dirname(moviepy.__file__), 'editor.py')
print(f"Editor.py existe: {os.path.exists(editor_path)}")

# Tentar importar editor
from moviepy import editor
print("Subm√≥dulo 'editor' importado com sucesso!")

# Verificar m√©todos essenciais
has_video = hasattr(editor, 'VideoFileClip')
has_with_audio = hasattr(editor, 'with_audio') or (hasattr(editor.VideoFileClip, 'with_audio') if has_video else False)
has_set_audio = hasattr(editor, 'set_audio') or (hasattr(editor.VideoFileClip, 'set_audio') if has_video else False)
print(f"VideoFileClip: {'‚úì' if has_video else '‚úó'}")
print(f"with_audio: {'‚úì' if has_with_audio else '‚úó'}")
print(f"set_audio: {'‚úì' if has_set_audio else '‚úó'}")

if has_video and has_with_audio and has_set_audio:
    sys.exit(0)  # Sucesso
else:
    sys.exit(1)  # Falha
"""
        
        with open("verify_moviepy_temp.py", "w", encoding="utf-8") as f:
            f.write(verify_script)
        
        # Executa o script de verifica√ß√£o
        stdout, stderr, code = run_command(f"{sys.executable} verify_moviepy_temp.py")
        log("\nResultado da verifica√ß√£o:\n" + stdout)
        
        # Remove o script tempor√°rio
        if os.path.exists("verify_moviepy_temp.py"):
            os.remove("verify_moviepy_temp.py")
        
        return code == 0
        
    except Exception as e:
        log(f"Erro durante a verifica√ß√£o: {str(e)}")
        return False

def main():
    """Fun√ß√£o principal que executa todo o processo"""
    print("="*60)
    print("       SOLU√á√ÉO SIMPLIFICADA - MOVIEPY")
    print("="*60)
    print(f"Python: {sys.executable}")
    print(f"Vers√£o-alvo: {target_version}")
    print("="*60)
    
    # Limpa log anterior
    if os.path.exists(log_file):
        os.remove(log_file)
    
    # Verifica permiss√µes de administrador
    if not check_admin():
        log("ERRO: Execute este script como ADMINISTRADOR!")
        log("No Windows: clique com o bot√£o direito no arquivo e selecione 'Executar como administrador'")
        input("Pressione Enter para sair...")
        return 1
    
    try:
        # Passo 1: Parar processos Python
        stop_python_processes()
        
        # Passo 2: Obter caminhos do Python
        python_paths = get_python_paths()
        log("\nDiret√≥rios site-packages identificados:")
        for path in python_paths:
            log(f"- {path}")
        
        # Passo 3: Remover MoviePy existente
        remove_moviepy(python_paths)
        
        # Passo 4: Limpar cache do pip
        clean_pip_cache()
        
        # Passo 5: Atualizar pip
        update_pip()
        
        # Passo 6: Instalar depend√™ncias
        install_dependencies()
        
        # Passo 7: Instalar MoviePy
        if not install_moviepy():
            log("Falha na instala√ß√£o do MoviePy.")
            return 1
        
        # Passo 8: Verificar instala√ß√£o
        log("\n" + "="*60)
        if verify_moviepy():
            log("üéâ SUCESSO! A instala√ß√£o do MoviePy est√° 100% funcionando!")
            log("‚úÖ O subm√≥dulo 'editor' est√° totalmente dispon√≠vel.")
            log("Voc√™ pode executar sua aplica√ß√£o auto-video-producerV5-dev.")
        else:
            log("‚ùå FALHA! A instala√ß√£o do MoviePy ainda est√° com problemas.")
            log("Sugest√µes:")
            log("1. Reinicie o computador e execute este script novamente como ADMINISTRADOR")
            log("2. Verifique as permiss√µes de seus diret√≥rios do Python")
            log(f"3. Consulte o arquivo de log para mais detalhes: {log_file}")
        log("="*60)
        
        return 0
        
    except Exception as e:
        log(f"Erro inesperado: {str(e)}")
        return 1
    finally:
        input("Pressione Enter para sair...")

if __name__ == "__main__":
    sys.exit(main())