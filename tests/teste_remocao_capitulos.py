#!/usr/bin/env python3
"""
Script para testar a remo√ß√£o de cabe√ßalhos de cap√≠tulos
Teste com 3 cap√≠tulos usando remove_chapter_headers=True
"""

import sys
import os
import json
from datetime import datetime

# Adicionar diret√≥rio ao path
sys.path.insert(0, '.')

print('=== TESTE DE REMO√á√ÉO DE CABE√áALHOS DE CAP√çTULOS ===')

# Importar servi√ßo
try:
    from services.storyteller_service import storyteller_service
    print('‚úÖ Storyteller Service carregado')
except Exception as e:
    print(f'‚ùå Erro ao carregar servi√ßo: {e}')
    exit(1)

# Configura√ß√µes do teste
titulo = 'Descal√ßa na Entrevista, Mas o Milion√°rio Mudou Sua Vida Para Sempre!'
premissa = '''Arthur Blackwood, um magnata da tecnologia solit√°rio e obcecado por sucesso, vive em uma mans√£o imponente, mas sua vida √© vazia, apesar da riqueza exorbitante. Sua entrevista para uma vaga de assistente pessoal atrai centenas de candidatos impecavelmente vestidos. Uma √∫nica exce√ß√£o: Maria, uma jovem de origem humilde, descal√ßa e com roupas simples, mas com um sorriso radiante e olhos cheios de determina√ß√£o.'''

print(f'üìã T√≠tulo: {titulo}')
print(f'üìã Cap√≠tulos: 3')
print(f'üìã Agente: millionaire_stories')
print(f'üìã Remove Chapter Headers: TRUE')

# Gerar roteiro COM remo√ß√£o de cabe√ßalhos
print('\nüîÑ Gerando roteiro COM remo√ß√£o de cabe√ßalhos...')
resultado_com_remocao = storyteller_service.generate_storyteller_script(
    title=titulo,
    premise=premissa,
    agent_type='millionaire_stories',
    num_chapters=3,
    remove_chapter_headers=True  # PAR√ÇMETRO CHAVE
)

# Gerar roteiro SEM remo√ß√£o de cabe√ßalhos para compara√ß√£o
print('\nüîÑ Gerando roteiro SEM remo√ß√£o de cabe√ßalhos (para compara√ß√£o)...')
resultado_sem_remocao = storyteller_service.generate_storyteller_script(
    title=titulo,
    premise=premissa,
    agent_type='millionaire_stories',
    num_chapters=3,
    remove_chapter_headers=False  # SEM REMO√á√ÉO
)

# Criar pasta de teste
pasta_teste = 'teste_remocao_capitulos'
if not os.path.exists(pasta_teste):
    os.makedirs(pasta_teste)
    print(f'üìÅ Pasta {pasta_teste} criada')

timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')

# Salvar resultado COM remo√ß√£o
if resultado_com_remocao.get('success'):
    arquivo_com_remocao = f'{pasta_teste}/roteiro_COM_remocao_{timestamp}.txt'
    with open(arquivo_com_remocao, 'w', encoding='utf-8') as f:
        f.write('=== ROTEIRO COM REMO√á√ÉO DE CABE√áALHOS ===\n\n')
        f.write(f'T√≠tulo: {titulo}\n\n')
        f.write(f'Premissa: {premissa}\n\n')
        f.write('ROTEIRO COMPLETO:\n')
        f.write('='*80 + '\n')
        f.write(resultado_com_remocao.get('full_script', ''))
    print(f'üíæ Roteiro COM remo√ß√£o salvo em: {arquivo_com_remocao}')
else:
    print(f'‚ùå Erro na gera√ß√£o COM remo√ß√£o: {resultado_com_remocao.get("error", "Erro desconhecido")}')

# Salvar resultado SEM remo√ß√£o
if resultado_sem_remocao.get('success'):
    arquivo_sem_remocao = f'{pasta_teste}/roteiro_SEM_remocao_{timestamp}.txt'
    with open(arquivo_sem_remocao, 'w', encoding='utf-8') as f:
        f.write('=== ROTEIRO SEM REMO√á√ÉO DE CABE√áALHOS ===\n\n')
        f.write(f'T√≠tulo: {titulo}\n\n')
        f.write(f'Premissa: {premissa}\n\n')
        f.write('ROTEIRO COMPLETO:\n')
        f.write('='*80 + '\n')
        f.write(resultado_sem_remocao.get('full_script', ''))
    print(f'üíæ Roteiro SEM remo√ß√£o salvo em: {arquivo_sem_remocao}')
else:
    print(f'‚ùå Erro na gera√ß√£o SEM remo√ß√£o: {resultado_sem_remocao.get("error", "Erro desconhecido")}')

# An√°lise de cabe√ßalhos
print('\nüìä AN√ÅLISE DE CABE√áALHOS:')

def contar_cabecalhos(texto):
    """Conta cabe√ßalhos de cap√≠tulos no texto"""
    import re
    # Padr√µes de cabe√ßalhos
    padrao_markdown = re.findall(r'^## Cap√≠tulo \d+', texto, re.MULTILINE)
    padrao_caps = re.findall(r'^CAP√çTULO \d+:', texto, re.MULTILINE)
    return len(padrao_markdown), len(padrao_caps)

if resultado_com_remocao.get('success'):
    texto_com_remocao = resultado_com_remocao.get('full_script', '')
    md_headers, caps_headers = contar_cabecalhos(texto_com_remocao)
    print(f'   COM remo√ß√£o - Cabe√ßalhos ## Cap√≠tulo: {md_headers}')
    print(f'   COM remo√ß√£o - Cabe√ßalhos CAP√çTULO: {caps_headers}')
    print(f'   COM remo√ß√£o - Total caracteres: {len(texto_com_remocao)}')

if resultado_sem_remocao.get('success'):
    texto_sem_remocao = resultado_sem_remocao.get('full_script', '')
    md_headers, caps_headers = contar_cabecalhos(texto_sem_remocao)
    print(f'   SEM remo√ß√£o - Cabe√ßalhos ## Cap√≠tulo: {md_headers}')
    print(f'   SEM remo√ß√£o - Cabe√ßalhos CAP√çTULO: {caps_headers}')
    print(f'   SEM remo√ß√£o - Total caracteres: {len(texto_sem_remocao)}')

# Relat√≥rio final
arquivo_relatorio = f'{pasta_teste}/relatorio_teste_remocao_{timestamp}.txt'
with open(arquivo_relatorio, 'w', encoding='utf-8') as f:
    f.write('=== RELAT√ìRIO DE TESTE - REMO√á√ÉO DE CABE√áALHOS ===\n\n')
    f.write(f'Data/Hora: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}\n\n')
    
    f.write('CONFIGURA√á√ÉO DO TESTE:\n')
    f.write(f'- T√≠tulo: {titulo}\n')
    f.write(f'- Cap√≠tulos: 3\n')
    f.write(f'- Agente: millionaire_stories\n\n')
    
    f.write('RESULTADOS:\n')
    if resultado_com_remocao.get('success'):
        texto = resultado_com_remocao.get('full_script', '')
        md_h, caps_h = contar_cabecalhos(texto)
        f.write(f'‚úÖ COM remo√ß√£o (remove_chapter_headers=True):\n')
        f.write(f'   - Cabe√ßalhos ## Cap√≠tulo: {md_h}\n')
        f.write(f'   - Cabe√ßalhos CAP√çTULO: {caps_h}\n')
        f.write(f'   - Total caracteres: {len(texto)}\n')
        f.write(f'   - Status: {"‚úÖ SUCESSO - SEM CABE√áALHOS" if md_h == 0 else "‚ùå FALHA - CABE√áALHOS PRESENTES"}\n\n')
    else:
        f.write(f'‚ùå COM remo√ß√£o: FALHA - {resultado_com_remocao.get("error", "Erro desconhecido")}\n\n')
    
    if resultado_sem_remocao.get('success'):
        texto = resultado_sem_remocao.get('full_script', '')
        md_h, caps_h = contar_cabecalhos(texto)
        f.write(f'‚úÖ SEM remo√ß√£o (remove_chapter_headers=False):\n')
        f.write(f'   - Cabe√ßalhos ## Cap√≠tulo: {md_h}\n')
        f.write(f'   - Cabe√ßalhos CAP√çTULO: {caps_h}\n')
        f.write(f'   - Total caracteres: {len(texto)}\n')
        f.write(f'   - Status: {"‚úÖ ESPERADO - COM CABE√áALHOS" if md_h > 0 else "‚ö†Ô∏è INESPERADO - SEM CABE√áALHOS"}\n\n')
    else:
        f.write(f'‚ùå SEM remo√ß√£o: FALHA - {resultado_sem_remocao.get("error", "Erro desconhecido")}\n\n')
    
    # Conclus√£o
    if (resultado_com_remocao.get('success') and resultado_sem_remocao.get('success')):
        com_headers = contar_cabecalhos(resultado_com_remocao.get('full_script', ''))[0]
        sem_headers = contar_cabecalhos(resultado_sem_remocao.get('full_script', ''))[0]
        
        if com_headers == 0 and sem_headers > 0:
            f.write('üéâ CONCLUS√ÉO: REMO√á√ÉO DE CABE√áALHOS FUNCIONANDO CORRETAMENTE!\n')
        elif com_headers == 0 and sem_headers == 0:
            f.write('‚ö†Ô∏è CONCLUS√ÉO: AMBOS SEM CABE√áALHOS - VERIFICAR IMPLEMENTA√á√ÉO\n')
        elif com_headers > 0:
            f.write('‚ùå CONCLUS√ÉO: REMO√á√ÉO DE CABE√áALHOS N√ÉO EST√Å FUNCIONANDO\n')
        else:
            f.write('‚ùì CONCLUS√ÉO: RESULTADO INESPERADO - VERIFICAR MANUALMENTE\n')
    else:
        f.write('‚ùå CONCLUS√ÉO: FALHA NA GERA√á√ÉO - N√ÉO FOI POSS√çVEL TESTAR\n')

print(f'üìä Relat√≥rio completo salvo em: {arquivo_relatorio}')
print('\n‚úÖ TESTE CONCLU√çDO!')
print(f'üìÅ Todos os arquivos salvos em: {pasta_teste}/')